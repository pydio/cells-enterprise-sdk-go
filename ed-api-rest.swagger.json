{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Pydio Cells Enterprise Rest API",
    "contact": {
      "name": "Pydio",
      "url": "https://pydio.com"
    },
    "version": "2.0"
  },
  "paths": {
    "/audit/data/reports": {
      "get": {
        "tags": [
          "AuditDataService"
        ],
        "summary": "[Enterprise Only] Audit all shares across the application",
        "operationId": "ListReports",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/reportsListReportsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/audit/data/shares": {
      "post": {
        "tags": [
          "AuditDataService"
        ],
        "summary": "[Enterprise Only] Audit all shares across the application",
        "operationId": "SharedResources",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reportsSharedResourcesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/reportsSharedResourcesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/auth/token/impersonate": {
      "post": {
        "tags": [
          "EnterpriseTokenService"
        ],
        "summary": "Generate a personal access token",
        "operationId": "ImpersonatePersonalAccessToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entPersonalAccessTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPersonalAccessTokenResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/auth/token/personal": {
      "post": {
        "tags": [
          "EnterpriseTokenService"
        ],
        "summary": "Generate a personal access token",
        "operationId": "GeneratePersonalAccessToken",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entPersonalAccessTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPersonalAccessTokenResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/auth/tokens": {
      "post": {
        "tags": [
          "EnterpriseTokenService"
        ],
        "summary": "List generated personal access tokens, eventually filtering by user",
        "operationId": "ListPersonalAccessTokens",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entListAccessTokensRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authPatListResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/auth/tokens/{TokenId}": {
      "delete": {
        "tags": [
          "EnterpriseTokenService"
        ],
        "summary": "Delete a personal access token based on its Uuid",
        "operationId": "RevokePersonalAccessToken",
        "parameters": [
          {
            "type": "string",
            "description": "Pass a specific Token ID to be revoked. If empty, request will use current JWT",
            "name": "TokenId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restRevokeResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/directories": {
      "get": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] List additional user directories",
        "operationId": "ListExternalDirectories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entExternalDirectoryCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/directories-test/ping": {
      "post": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Sends an arbitrary config and try to ping the server and bind",
        "operationId": "PingExternalDirectory",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entExternalDirectoryPingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entExternalDirectoryTestResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/directories-test/search": {
      "post": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Sends an arbitrary config and try to ldapsearch using a given SearchFilter",
        "operationId": "SearchExternalDirectory",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entExternalDirectorySearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entExternalDirectoryTestResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/directories/{ConfigId}": {
      "put": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Add/Create an external directory",
        "operationId": "PutExternalDirectory",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the external directory",
            "name": "ConfigId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "EntExternalDirectoryConfig",
              "properties": {
                "Config": {
                  "title": "LDAP or Active Directory configuration",
                  "$ref": "#/definitions/authLdapServerConfig"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entExternalDirectoryResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Delete external directory",
        "operationId": "DeleteExternalDirectory",
        "parameters": [
          {
            "type": "string",
            "description": "Id of the external directory",
            "name": "ConfigId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Config.ConfigId",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.DomainName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.Host",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.Connection",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.BindDN",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.BindPW",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "Config.BindAnonymous",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "Config.SkipVerifyCertificate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.RootCA",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To be converted to []byte",
            "name": "Config.RootCAData",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "Config.PageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "Config.User.DNs",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.User.Filter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.User.IDAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.User.DisplayAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.User.Scope",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.Mapping.LeftAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.Mapping.RightAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.Mapping.RuleString",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.Mapping.RolePrefix",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "Config.MemberOfMapping.GroupFilter.DNs",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.GroupFilter.Filter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.GroupFilter.IDAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.GroupFilter.DisplayAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.GroupFilter.Scope",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "Config.MemberOfMapping.SupportNestedGroup",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "Config.MemberOfMapping.RealMemberOf",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.RealMemberOfAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.RealMemberOfValueFormat",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.PydioMemberOfAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.MemberOfMapping.PydioMemberOfValueFormat",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.RolePrefix",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.Schedule",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Config.SchedulerDetails",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "Config.SyncOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entExternalDirectoryResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/oauth2clients": {
      "get": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] List oauth2 clients",
        "operationId": "ListOAuth2Clients",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ClientCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/oauth2clients/{client_id}": {
      "put": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Add/Create a new oauth2 client",
        "operationId": "PutOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "name": "client_id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "audience": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "client_name": {
                  "type": "string"
                },
                "client_secret": {
                  "type": "string"
                },
                "grant_types": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "redirect_uris": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "response_types": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "scope": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ClientResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Delete an oauth2 client",
        "operationId": "DeleteOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "name": "client_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "client_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "client_secret",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "redirect_uris",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "grant_types",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "response_types",
            "in": "query"
          },
          {
            "type": "string",
            "name": "scope",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "audience",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ClientResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/oauth2connectors": {
      "get": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] List oauth2 connectors",
        "operationId": "ListOAuth2Connectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ConnectorCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Add/Create a new oauth2 client",
        "operationId": "PutOAuth2Connectors",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authOAuth2ConnectorCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ConnectorResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/oauth2connectors/{id}": {
      "put": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Add/Create a new oauth2 client",
        "operationId": "PutOAuth2Connector",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configbitbucket": {
                  "$ref": "#/definitions/authOAuth2ConnectorBitbucketConfig"
                },
                "configgithub": {
                  "$ref": "#/definitions/authOAuth2ConnectorGithubConfig"
                },
                "configgitlab": {
                  "$ref": "#/definitions/authOAuth2ConnectorGitlabConfig"
                },
                "configldap": {
                  "$ref": "#/definitions/authLdapServerConfig"
                },
                "configlinkedin": {
                  "$ref": "#/definitions/authOAuth2ConnectorLinkedinConfig"
                },
                "configmicrosoft": {
                  "$ref": "#/definitions/authOAuth2ConnectorMicrosoftConfig"
                },
                "configmock": {
                  "$ref": "#/definitions/authOAuth2ConnectorMockConfig"
                },
                "configoauth": {
                  "$ref": "#/definitions/authOAuth2ConnectorOAuthConfig"
                },
                "configoidc": {
                  "$ref": "#/definitions/authOAuth2ConnectorOIDCConfig"
                },
                "configpydio": {
                  "$ref": "#/definitions/authOAuth2ConnectorPydioConfig"
                },
                "configsaml": {
                  "$ref": "#/definitions/authOAuth2ConnectorSAMLConfig"
                },
                "mappingRules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authOAuth2MappingRule"
                  }
                },
                "name": {
                  "type": "string"
                },
                "sites": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ConnectorResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Delete an oauth2 client",
        "operationId": "DeleteOAuth2Connector",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoidc.issuer",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoidc.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoidc.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoidc.redirectURI",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configoidc.basicAuthUnsupported",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configoidc.hostedDomains",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configoidc.scopes",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configoidc.insecureSkipEmailVerified",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configoidc.getUserInfo",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoidc.userIDKey",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoidc.userNameKey",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.ssoURL",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.ca",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.redirectURI",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.usernameAttr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.emailAttr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.groupsAttr",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.caData",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configsaml.insecureSkipSignatureValidation",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.entityIssuer",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.ssoIssuer",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.groupsDelim",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configsaml.nameIDPolicyFormat",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configbitbucket.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configbitbucket.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configbitbucket.redirectURI",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configbitbucket.teams",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgithub.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgithub.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgithub.redirectURI",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configgithub.loadAllGroups",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgithub.teamNameField",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configgithub.useLoginAsID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "For GitHub enterprise",
            "name": "configgithub.hostName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgithub.rootCA",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgitlab.baseURL",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgitlab.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgitlab.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configgitlab.redirectURI",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configgitlab.groups",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configgitlab.userLoginAsID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configlinkedin.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configlinkedin.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configlinkedin.redirectURI",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configmicrosoft.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configmicrosoft.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configmicrosoft.redirectURI",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configmicrosoft.tenant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configmicrosoft.groups",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configmicrosoft.onlySecurityGroups",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configmicrosoft.groupNameFormat",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configmicrosoft.useGroupsAsWhitelist",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.ConfigId",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.DomainName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.Host",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.Connection",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.BindDN",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.BindPW",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configldap.BindAnonymous",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configldap.SkipVerifyCertificate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.RootCA",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To be converted to []byte",
            "name": "configldap.RootCAData",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "configldap.PageSize",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configldap.User.DNs",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.User.Filter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.User.IDAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.User.DisplayAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.User.Scope",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.Mapping.LeftAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.Mapping.RightAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.Mapping.RuleString",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.Mapping.RolePrefix",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configldap.MemberOfMapping.GroupFilter.DNs",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.GroupFilter.Filter",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.GroupFilter.IDAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.GroupFilter.DisplayAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.GroupFilter.Scope",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configldap.MemberOfMapping.SupportNestedGroup",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configldap.MemberOfMapping.RealMemberOf",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.RealMemberOfAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.RealMemberOfValueFormat",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.PydioMemberOfAttribute",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.MemberOfMapping.PydioMemberOfValueFormat",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.RolePrefix",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.Schedule",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configldap.SchedulerDetails",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configldap.SyncOnly",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.baseURL",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.authorizeURL",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.tokenURL",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.userInfoURL",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.clientID",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.clientSecret",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configoauth.redirectURI",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "configoauth.groups",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configoauth.useLoginAsID",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "configoauth.useBrokenAuthHeaderProvider",
            "in": "query"
          },
          {
            "type": "string",
            "name": "configmock.jsonIdentity",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "sites",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entOAuth2ConnectorResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/sites": {
      "get": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] List configured sites",
        "operationId": "ListSites",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entListSitesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/versioning/{Uuid}": {
      "post": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Create or update a versioning policy",
        "operationId": "PutVersioningPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Description": {
                  "type": "string"
                },
                "IgnoreFilesGreaterThan": {
                  "type": "string",
                  "format": "int64"
                },
                "KeepPeriods": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/treeVersioningKeepPeriod"
                  }
                },
                "MaxSizePerFile": {
                  "type": "string",
                  "format": "int64"
                },
                "MaxTotalSize": {
                  "type": "string",
                  "format": "int64"
                },
                "Name": {
                  "type": "string"
                },
                "NodeDeletedStrategy": {
                  "$ref": "#/definitions/treeVersioningNodeDeletedStrategy"
                },
                "VersionsDataSourceBucket": {
                  "type": "string"
                },
                "VersionsDataSourceName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeVersioningPolicy"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Delete a versioning policy",
        "operationId": "DeleteVersioningPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Description",
            "in": "query"
          },
          {
            "type": "string",
            "name": "VersionsDataSourceName",
            "in": "query"
          },
          {
            "type": "string",
            "name": "VersionsDataSourceBucket",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "MaxTotalSize",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "MaxSizePerFile",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "IgnoreFilesGreaterThan",
            "in": "query"
          },
          {
            "enum": [
              "KeepAll",
              "KeepLast",
              "KeepNone"
            ],
            "type": "string",
            "default": "KeepAll",
            "name": "NodeDeletedStrategy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteVersioningPolicyResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/config/virtualnodes/{Uuid}": {
      "post": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Create or update a virtual node",
        "operationId": "PutVirtualNode",
        "parameters": [
          {
            "type": "string",
            "description": "------------------------------------\nCore identification of the node\n------------------------------------",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "AppearsIn": {
                  "type": "array",
                  "title": "Can be used for output when node is appearing in multiple workspaces",
                  "items": {
                    "$ref": "#/definitions/treeWorkspaceRelativePath"
                  }
                },
                "Commits": {
                  "type": "array",
                  "title": "List of successive commits",
                  "items": {
                    "$ref": "#/definitions/treeChangeLog"
                  }
                },
                "Etag": {
                  "type": "string",
                  "title": "Hash of the content if node is a LEAF, Uuid or"
                },
                "MTime": {
                  "type": "string",
                  "format": "int64",
                  "title": "Last modification Timestamp"
                },
                "MetaStore": {
                  "type": "object",
                  "title": "------------------------------------\nThen a free K =\u003e V representation of any kind of metadata\n------------------------------------",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "Mode": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Permission mode, like 0777"
                },
                "Path": {
                  "type": "string"
                },
                "Size": {
                  "type": "string",
                  "format": "int64",
                  "title": "Size of the file, or cumulated size of folder"
                },
                "Type": {
                  "$ref": "#/definitions/treeNodeType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeNode"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EnterpriseConfigService"
        ],
        "summary": "[Enterprise Only] Delete a virtual node",
        "operationId": "DeleteVirtualNode",
        "parameters": [
          {
            "type": "string",
            "description": "------------------------------------\nCore identification of the node\n------------------------------------",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Path",
            "in": "query"
          },
          {
            "enum": [
              "UNKNOWN",
              "LEAF",
              "COLLECTION"
            ],
            "type": "string",
            "default": "UNKNOWN",
            "name": "Type",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "description": "Size of the file, or cumulated size of folder",
            "name": "Size",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "description": "Last modification Timestamp",
            "name": "MTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Permission mode, like 0777",
            "name": "Mode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Hash of the content if node is a LEAF, Uuid or",
            "name": "Etag",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteVirtualNodeResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/frontend/login/connectors": {
      "get": {
        "tags": [
          "EnterpriseFrontendService"
        ],
        "summary": "[Enterprise Only] Handle Login Connectors",
        "operationId": "FrontLoginConnectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entFrontLoginConnectorsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/license/stats": {
      "get": {
        "tags": [
          "LicenseService"
        ],
        "summary": "[Enterprise Only] Display statistics about licenses usage",
        "operationId": "LicenseStats",
        "parameters": [
          {
            "type": "boolean",
            "name": "ForceRefresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/certLicenseStatsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/license/update": {
      "put": {
        "tags": [
          "LicenseService"
        ],
        "summary": "[Enterprise Only] Update License String",
        "operationId": "PutLicenseInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/certPutLicenseInfoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/certPutLicenseInfoResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/log/audit": {
      "post": {
        "tags": [
          "EnterpriseLogService"
        ],
        "summary": "[Enterprise Only] Auditable Logs, in Json or CSV format",
        "operationId": "Audit",
        "parameters": [
          {
            "description": "ListLogRequest launches a parameterised query in the log repository and streams the results.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logListLogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restLogMessageCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/log/audit/chartdata": {
      "post": {
        "tags": [
          "EnterpriseLogService"
        ],
        "summary": "[Enterprise Only] Retrieves aggregated audit logs to generate charts",
        "operationId": "AuditChartData",
        "parameters": [
          {
            "description": "TimeRangeRequest contains the parameter to configure the query to \nretrieve the number of audit events of this type for a given time range\ndefined by last timestamp and a range type.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logTimeRangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restTimeRangeResultCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/log/audit/export": {
      "post": {
        "tags": [
          "EnterpriseLogService"
        ],
        "summary": "[Enterprise Only] Auditable Logs, in Json or CSV format",
        "operationId": "AuditExport",
        "parameters": [
          {
            "description": "ListLogRequest launches a parameterised query in the log repository and streams the results.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logListLogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restLogMessageCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/log/sys/export": {
      "post": {
        "tags": [
          "EnterpriseLogService"
        ],
        "summary": "[Enterprise Only] Technical Logs, in Json or CSV format",
        "operationId": "SyslogExport",
        "parameters": [
          {
            "description": "ListLogRequest launches a parameterised query in the log repository and streams the results.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logListLogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restLogMessageCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/policy": {
      "put": {
        "tags": [
          "EnterprisePolicyService"
        ],
        "summary": "[Enterprise Only] Update or create a security policy",
        "operationId": "PutPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmPolicyGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/idmPolicyGroup"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/policy/ipbans": {
      "get": {
        "tags": [
          "EnterprisePolicyService"
        ],
        "summary": "[Enterprise Only] List banned IPs",
        "operationId": "ListBans",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ipbanListBansCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "post": {
        "tags": [
          "EnterprisePolicyService"
        ],
        "summary": "[Enterprise Only] List banned IPs",
        "operationId": "Unban",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ipbanUnbanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ipbanUnbanResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/policy/iplists": {
      "post": {
        "tags": [
          "EnterprisePolicyService"
        ],
        "summary": "[Enterprise Only] Update white/black lists",
        "operationId": "UpdateIPs",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ipbanIPsCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ipbanIPsCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/policy/iplists/{Name}": {
      "get": {
        "tags": [
          "EnterprisePolicyService"
        ],
        "summary": "[Enterprise Only] List white/black lists",
        "operationId": "ListIPs",
        "parameters": [
          {
            "type": "string",
            "name": "Name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ipbanIPsCollection"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/policy/{Uuid}": {
      "delete": {
        "tags": [
          "EnterprisePolicyService"
        ],
        "summary": "[Enterprise Only] Delete a security policy",
        "operationId": "DeletePolicy",
        "parameters": [
          {
            "type": "string",
            "name": "Uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Description",
            "in": "query"
          },
          {
            "type": "string",
            "name": "OwnerUuid",
            "in": "query"
          },
          {
            "enum": [
              "rest",
              "acl",
              "oidc"
            ],
            "type": "string",
            "default": "rest",
            "name": "ResourceGroup",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "LastUpdated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restDeleteResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/hooks/{HookSlug}": {
      "post": {
        "tags": [
          "SchedulerService"
        ],
        "operationId": "TriggerHook",
        "parameters": [
          {
            "type": "string",
            "name": "HookSlug",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "JobParameters": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "Paths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "TaskID": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entJobHookResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/jobs": {
      "put": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "[Enterprise Only] Put a job in the scheduler",
        "operationId": "PutJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/jobsPutJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/jobsPutJobResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/jobs/{JobID}": {
      "delete": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "[Enterprise Only] Delete a job from the scheduler",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "type": "string",
            "name": "JobID",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "CleanableJobs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/jobsDeleteJobResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/actions": {
      "put": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for actions",
        "operationId": "PutActionTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entPutActionTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPutActionTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for actions",
        "operationId": "ListActionTemplates",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entListActionTemplatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entListActionTemplatesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/actions/{TemplateName}": {
      "delete": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for actions",
        "operationId": "DeleteActionTemplate",
        "parameters": [
          {
            "type": "string",
            "name": "TemplateName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteActionTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/docs/{Type}": {
      "get": {
        "tags": [
          "SchedulerService"
        ],
        "operationId": "ListDocTemplates",
        "parameters": [
          {
            "type": "string",
            "name": "Type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDocTemplatesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/jobs": {
      "post": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for Jobs",
        "operationId": "ListJobTemplates",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entListJobTemplatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entListJobTemplatesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/jobs/{Name}": {
      "put": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for Jobs",
        "operationId": "PutJobTemplate",
        "parameters": [
          {
            "type": "string",
            "name": "Name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "EntPutJobTemplateRequest",
              "properties": {
                "Job": {
                  "$ref": "#/definitions/jobsJob"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPutJobTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for Jobs",
        "operationId": "DeleteJobTemplate",
        "parameters": [
          {
            "type": "string",
            "name": "Name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteJobTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/playground": {
      "post": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Run a code sample",
        "operationId": "ExecutePlaygroundCode",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entPlaygroundRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPlaygroundResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/selectors": {
      "put": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for filters",
        "operationId": "PutSelectorTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entPutSelectorTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPutSelectorTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for filters",
        "operationId": "ListSelectorTemplates",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entListSelectorTemplatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entListSelectorTemplatesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/templates/selectors/{TemplateName}": {
      "delete": {
        "tags": [
          "SchedulerService"
        ],
        "summary": "Templates management for filters",
        "operationId": "DeleteSelectorTemplate",
        "parameters": [
          {
            "type": "string",
            "name": "TemplateName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteSelectorTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/versions/{JobID}": {
      "post": {
        "tags": [
          "SchedulerService"
        ],
        "operationId": "ListJobVersions",
        "parameters": [
          {
            "type": "string",
            "name": "JobID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Limit": {
                  "type": "integer",
                  "format": "int32"
                },
                "LoadJobs": {
                  "type": "boolean"
                },
                "Offset": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entListJobVersionsResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/scheduler/versions/{JobID}/{VersionID}": {
      "delete": {
        "tags": [
          "SchedulerService"
        ],
        "operationId": "DeleteJobVersion",
        "parameters": [
          {
            "type": "string",
            "name": "JobID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "VersionID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteJobVersionResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SchedulerService"
        ],
        "operationId": "RestoreJobVersion",
        "parameters": [
          {
            "type": "string",
            "name": "JobID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "VersionID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Type": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entRestoreJobVersionResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/templates/meta": {
      "get": {
        "tags": [
          "EnterpriseTemplatesService"
        ],
        "summary": "Store an arbitrary metadata template",
        "operationId": "ListMetaTemplates",
        "parameters": [
          {
            "type": "string",
            "name": "Namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entListMetaTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EnterpriseTemplatesService"
        ],
        "summary": "Store an arbitrary metadata template",
        "operationId": "PutMetaTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entPutMetaTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entPutMetaTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/templates/meta/{TemplateUuid}": {
      "delete": {
        "tags": [
          "EnterpriseTemplatesService"
        ],
        "summary": "Delete an arbitrary metadata template",
        "operationId": "DeleteMetaTemplate",
        "parameters": [
          {
            "type": "string",
            "name": "TemplateUuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteMetaTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/templates/node": {
      "post": {
        "tags": [
          "EnterpriseTemplatesService"
        ],
        "summary": "Create a template from a specific node",
        "operationId": "CreateNodeTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entCreateNodeTemplateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entCreateNodeTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/templates/node/{TemplateUuid}": {
      "delete": {
        "tags": [
          "EnterpriseTemplatesService"
        ],
        "summary": "Create a template from a specific node",
        "operationId": "DeleteNodeTemplate",
        "parameters": [
          {
            "type": "string",
            "name": "TemplateUuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/entDeleteNodeTemplateResponse"
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User has no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ListLogRequestLogFormat": {
      "type": "string",
      "title": "Output Format",
      "default": "JSON",
      "enum": [
        "JSON",
        "CSV",
        "XLSX"
      ]
    },
    "NodeChangeEventEventType": {
      "type": "string",
      "default": "CREATE",
      "enum": [
        "CREATE",
        "READ",
        "UPDATE_PATH",
        "UPDATE_CONTENT",
        "UPDATE_META",
        "UPDATE_USER_META",
        "DELETE"
      ]
    },
    "activityObject": {
      "type": "object",
      "properties": {
        "@context": {
          "type": "string"
        },
        "accuracy": {
          "type": "number",
          "format": "float",
          "title": "Place Properties"
        },
        "actor": {
          "title": "Activity Properties",
          "$ref": "#/definitions/activityObject"
        },
        "altitude": {
          "type": "number",
          "format": "float"
        },
        "anyOf": {
          "$ref": "#/definitions/activityObject"
        },
        "attachment": {
          "$ref": "#/definitions/activityObject"
        },
        "attributedTo": {
          "$ref": "#/definitions/activityObject"
        },
        "audience": {
          "$ref": "#/definitions/activityObject"
        },
        "bcc": {
          "$ref": "#/definitions/activityObject"
        },
        "bto": {
          "$ref": "#/definitions/activityObject"
        },
        "cc": {
          "$ref": "#/definitions/activityObject"
        },
        "closed": {
          "type": "string",
          "format": "date-time"
        },
        "content": {
          "$ref": "#/definitions/activityObject"
        },
        "context": {
          "$ref": "#/definitions/activityObject"
        },
        "current": {
          "$ref": "#/definitions/activityObject"
        },
        "deleted": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "first": {
          "$ref": "#/definitions/activityObject"
        },
        "formerType": {
          "title": "Tombstone Properties",
          "$ref": "#/definitions/activityObjectType"
        },
        "generator": {
          "$ref": "#/definitions/activityObject"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "href": {
          "type": "string",
          "title": "Link Properties"
        },
        "hreflang": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/activityObject"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/activityObject"
        },
        "inReplyTo": {
          "$ref": "#/definitions/activityObject"
        },
        "instrument": {
          "$ref": "#/definitions/activityObject"
        },
        "items": {
          "type": "array",
          "title": "Collection Properties",
          "items": {
            "$ref": "#/definitions/activityObject"
          }
        },
        "last": {
          "$ref": "#/definitions/activityObject"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "location": {
          "$ref": "#/definitions/activityObject"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        },
        "markdown": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next": {
          "$ref": "#/definitions/activityObject"
        },
        "object": {
          "$ref": "#/definitions/activityObject"
        },
        "oneOf": {
          "title": "Question Properties",
          "$ref": "#/definitions/activityObject"
        },
        "origin": {
          "$ref": "#/definitions/activityObject"
        },
        "partOf": {
          "$ref": "#/definitions/activityObject"
        },
        "prev": {
          "$ref": "#/definitions/activityObject"
        },
        "preview": {
          "$ref": "#/definitions/activityObject"
        },
        "published": {
          "type": "string",
          "format": "date-time"
        },
        "radius": {
          "type": "number",
          "format": "float"
        },
        "rel": {
          "type": "string"
        },
        "relationship": {
          "$ref": "#/definitions/activityObject"
        },
        "replies": {
          "$ref": "#/definitions/activityObject"
        },
        "result": {
          "$ref": "#/definitions/activityObject"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "subject": {
          "title": "Relationship Properties",
          "$ref": "#/definitions/activityObject"
        },
        "summary": {
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/activityObject"
        },
        "target": {
          "$ref": "#/definitions/activityObject"
        },
        "to": {
          "$ref": "#/definitions/activityObject"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/activityObjectType"
        },
        "units": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "$ref": "#/definitions/activityObject"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "activityObjectType": {
      "type": "string",
      "title": "- Collection: CollectionTypes\n - Application: Actor Types\n - Article: Objects Types\n - Accept: Activity Types\n - Workspace: Pydio Types",
      "default": "BaseObject",
      "enum": [
        "BaseObject",
        "Activity",
        "Link",
        "Mention",
        "Collection",
        "OrderedCollection",
        "CollectionPage",
        "OrderedCollectionPage",
        "Application",
        "Group",
        "Organization",
        "Person",
        "Service",
        "Article",
        "Audio",
        "Document",
        "Event",
        "Image",
        "Note",
        "Page",
        "Place",
        "Profile",
        "Relationship",
        "Tombstone",
        "Video",
        "Accept",
        "Add",
        "Announce",
        "Arrive",
        "Block",
        "Create",
        "Delete",
        "Dislike",
        "Flag",
        "Follow",
        "Ignore",
        "Invite",
        "Join",
        "Leave",
        "Like",
        "Listen",
        "Move",
        "Offer",
        "Question",
        "Reject",
        "Read",
        "Remove",
        "TentativeReject",
        "TentativeAccept",
        "Travel",
        "Undo",
        "Update",
        "UpdateComment",
        "UpdateMeta",
        "View",
        "Workspace",
        "Digest",
        "Folder",
        "Cell",
        "Share"
      ]
    },
    "authLdapMapping": {
      "type": "object",
      "properties": {
        "LeftAttribute": {
          "type": "string"
        },
        "RightAttribute": {
          "type": "string"
        },
        "RolePrefix": {
          "type": "string"
        },
        "RuleString": {
          "type": "string"
        }
      }
    },
    "authLdapMemberOfMapping": {
      "type": "object",
      "properties": {
        "GroupFilter": {
          "$ref": "#/definitions/authLdapSearchFilter"
        },
        "Mapping": {
          "$ref": "#/definitions/authLdapMapping"
        },
        "PydioMemberOfAttribute": {
          "type": "string"
        },
        "PydioMemberOfValueFormat": {
          "type": "string"
        },
        "RealMemberOf": {
          "type": "boolean"
        },
        "RealMemberOfAttribute": {
          "type": "string"
        },
        "RealMemberOfValueFormat": {
          "type": "string"
        },
        "SupportNestedGroup": {
          "type": "boolean"
        }
      }
    },
    "authLdapSearchFilter": {
      "type": "object",
      "properties": {
        "DNs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DisplayAttribute": {
          "type": "string"
        },
        "Filter": {
          "type": "string"
        },
        "IDAttribute": {
          "type": "string"
        },
        "Scope": {
          "type": "string"
        }
      }
    },
    "authLdapServerConfig": {
      "type": "object",
      "properties": {
        "BindAnonymous": {
          "type": "boolean"
        },
        "BindDN": {
          "type": "string"
        },
        "BindPW": {
          "type": "string"
        },
        "ConfigId": {
          "type": "string"
        },
        "Connection": {
          "type": "string"
        },
        "DomainName": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "MappingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authLdapMapping"
          }
        },
        "MemberOfMapping": {
          "$ref": "#/definitions/authLdapMemberOfMapping"
        },
        "PageSize": {
          "type": "integer",
          "format": "int32"
        },
        "RolePrefix": {
          "type": "string"
        },
        "RootCA": {
          "type": "string"
        },
        "RootCAData": {
          "type": "string",
          "title": "To be converted to []byte"
        },
        "Schedule": {
          "type": "string"
        },
        "SchedulerDetails": {
          "type": "string"
        },
        "SkipVerifyCertificate": {
          "type": "boolean"
        },
        "SyncOnly": {
          "type": "boolean"
        },
        "User": {
          "$ref": "#/definitions/authLdapSearchFilter"
        }
      }
    },
    "authOAuth2ClientConfig": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "client_id": {
          "type": "string"
        },
        "client_name": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "grant_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "redirect_uris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "response_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorBitbucketConfig": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "redirectURI": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "authOAuth2ConnectorCollection": {
      "type": "object",
      "properties": {
        "connectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authOAuth2ConnectorConfig"
          }
        }
      }
    },
    "authOAuth2ConnectorConfig": {
      "type": "object",
      "properties": {
        "configbitbucket": {
          "$ref": "#/definitions/authOAuth2ConnectorBitbucketConfig"
        },
        "configgithub": {
          "$ref": "#/definitions/authOAuth2ConnectorGithubConfig"
        },
        "configgitlab": {
          "$ref": "#/definitions/authOAuth2ConnectorGitlabConfig"
        },
        "configldap": {
          "$ref": "#/definitions/authLdapServerConfig"
        },
        "configlinkedin": {
          "$ref": "#/definitions/authOAuth2ConnectorLinkedinConfig"
        },
        "configmicrosoft": {
          "$ref": "#/definitions/authOAuth2ConnectorMicrosoftConfig"
        },
        "configmock": {
          "$ref": "#/definitions/authOAuth2ConnectorMockConfig"
        },
        "configoauth": {
          "$ref": "#/definitions/authOAuth2ConnectorOAuthConfig"
        },
        "configoidc": {
          "$ref": "#/definitions/authOAuth2ConnectorOIDCConfig"
        },
        "configpydio": {
          "$ref": "#/definitions/authOAuth2ConnectorPydioConfig"
        },
        "configsaml": {
          "$ref": "#/definitions/authOAuth2ConnectorSAMLConfig"
        },
        "id": {
          "type": "string"
        },
        "mappingRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authOAuth2MappingRule"
          }
        },
        "name": {
          "type": "string"
        },
        "sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorGithubConfig": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "hostName": {
          "type": "string",
          "title": "For GitHub enterprise"
        },
        "loadAllGroups": {
          "type": "boolean"
        },
        "orgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authOAuth2ConnectorGithubConfigOrg"
          }
        },
        "redirectURI": {
          "type": "string"
        },
        "rootCA": {
          "type": "string"
        },
        "teamNameField": {
          "type": "string"
        },
        "useLoginAsID": {
          "type": "boolean"
        }
      }
    },
    "authOAuth2ConnectorGithubConfigOrg": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "authOAuth2ConnectorGitlabConfig": {
      "type": "object",
      "properties": {
        "baseURL": {
          "type": "string"
        },
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "redirectURI": {
          "type": "string"
        },
        "userLoginAsID": {
          "type": "boolean"
        }
      }
    },
    "authOAuth2ConnectorLinkedinConfig": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "redirectURI": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorMicrosoftConfig": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "groupNameFormat": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "onlySecurityGroups": {
          "type": "boolean"
        },
        "redirectURI": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "useGroupsAsWhitelist": {
          "type": "boolean"
        }
      }
    },
    "authOAuth2ConnectorMockConfig": {
      "type": "object",
      "properties": {
        "jsonIdentity": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorOAuthConfig": {
      "type": "object",
      "properties": {
        "authorizeURL": {
          "type": "string"
        },
        "baseURL": {
          "type": "string"
        },
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "redirectURI": {
          "type": "string"
        },
        "tokenURL": {
          "type": "string"
        },
        "useBrokenAuthHeaderProvider": {
          "type": "boolean"
        },
        "useLoginAsID": {
          "type": "boolean"
        },
        "userInfoURL": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorOIDCConfig": {
      "type": "object",
      "properties": {
        "basicAuthUnsupported": {
          "type": "boolean"
        },
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "getUserInfo": {
          "type": "boolean"
        },
        "hostedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "insecureSkipEmailVerified": {
          "type": "boolean"
        },
        "issuer": {
          "type": "string"
        },
        "redirectURI": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userIDKey": {
          "type": "string"
        },
        "userNameKey": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorPydioConfig": {
      "type": "object",
      "properties": {
        "pydioconnectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authOAuth2ConnectorPydioConfigConnector"
          }
        }
      }
    },
    "authOAuth2ConnectorPydioConfigConnector": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "authOAuth2ConnectorSAMLConfig": {
      "type": "object",
      "properties": {
        "ca": {
          "type": "string"
        },
        "caData": {
          "type": "string"
        },
        "emailAttr": {
          "type": "string"
        },
        "entityIssuer": {
          "type": "string"
        },
        "groupsAttr": {
          "type": "string"
        },
        "groupsDelim": {
          "type": "string"
        },
        "insecureSkipSignatureValidation": {
          "type": "boolean"
        },
        "nameIDPolicyFormat": {
          "type": "string"
        },
        "redirectURI": {
          "type": "string"
        },
        "ssoIssuer": {
          "type": "string"
        },
        "ssoURL": {
          "type": "string"
        },
        "usernameAttr": {
          "type": "string"
        }
      }
    },
    "authOAuth2MappingRule": {
      "type": "object",
      "properties": {
        "LeftAttribute": {
          "type": "string"
        },
        "LeftSplit": {
          "type": "string"
        },
        "NoUpdate": {
          "type": "boolean"
        },
        "RightAttribute": {
          "type": "string"
        },
        "RightValueTemplate": {
          "type": "string"
        },
        "RuleString": {
          "type": "string"
        }
      }
    },
    "authPatListResponse": {
      "type": "object",
      "properties": {
        "Tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authPersonalAccessToken"
          }
        }
      }
    },
    "authPatType": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "PERSONAL",
        "DOCUMENT"
      ]
    },
    "authPersonalAccessToken": {
      "type": "object",
      "properties": {
        "AutoRefreshWindow": {
          "type": "integer",
          "format": "int32"
        },
        "CreatedAt": {
          "type": "string",
          "format": "int64"
        },
        "CreatedBy": {
          "type": "string"
        },
        "ExpiresAt": {
          "type": "string",
          "format": "int64"
        },
        "Label": {
          "type": "string"
        },
        "Scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Type": {
          "$ref": "#/definitions/authPatType"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "int64"
        },
        "UserLogin": {
          "type": "string"
        },
        "UserUuid": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "certLicenseInfo": {
      "type": "object",
      "properties": {
        "AccountName": {
          "type": "string"
        },
        "ExpireTime": {
          "type": "integer",
          "format": "int32"
        },
        "Features": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "IssueTime": {
          "type": "integer",
          "format": "int32"
        },
        "MaxPeers": {
          "type": "string",
          "format": "int64"
        },
        "MaxUsers": {
          "type": "string",
          "format": "int64"
        },
        "ServerDomain": {
          "type": "string"
        }
      }
    },
    "certLicenseStatsResponse": {
      "type": "object",
      "properties": {
        "ActivePeers": {
          "type": "string",
          "format": "int64"
        },
        "ActiveUsers": {
          "type": "string",
          "format": "int64"
        },
        "License": {
          "$ref": "#/definitions/certLicenseInfo"
        }
      }
    },
    "certPutLicenseInfoRequest": {
      "type": "object",
      "properties": {
        "LicenseString": {
          "type": "string"
        }
      }
    },
    "certPutLicenseInfoResponse": {
      "type": "object",
      "properties": {
        "ErrorInvalid": {
          "type": "boolean"
        },
        "ErrorWrite": {
          "type": "boolean"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entActionTemplate": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/jobsAction"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "entConnector": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "entCreateNodeTemplateRequest": {
      "type": "object",
      "properties": {
        "Policies": {
          "type": "array",
          "title": "Optional policies",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "RefNodeUuid": {
          "type": "string"
        },
        "TplLabel": {
          "type": "string"
        }
      }
    },
    "entCreateNodeTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        },
        "TemplateUuid": {
          "type": "string"
        }
      }
    },
    "entDeleteActionTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteJobTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteJobVersionResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteMetaTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteNodeTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteSelectorTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteVersioningPolicyResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDeleteVirtualNodeResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entDocTemplatePiece": {
      "type": "object",
      "properties": {
        "Context": {
          "type": "string"
        },
        "Long": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Short": {
          "type": "string"
        }
      }
    },
    "entDocTemplatesResponse": {
      "type": "object",
      "properties": {
        "Docs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entDocTemplatePiece"
          }
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "entExternalDirectoryCollection": {
      "type": "object",
      "properties": {
        "Directories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authLdapServerConfig"
          }
        }
      }
    },
    "entExternalDirectoryPingRequest": {
      "type": "object",
      "title": "Try to connect to an external directory",
      "properties": {
        "Bind": {
          "type": "boolean"
        },
        "Config": {
          "$ref": "#/definitions/authLdapServerConfig"
        }
      }
    },
    "entExternalDirectoryResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entExternalDirectorySearchRequest": {
      "type": "object",
      "title": "Try to connect perform an ldapsearch in an external directory",
      "properties": {
        "Config": {
          "$ref": "#/definitions/authLdapServerConfig"
        },
        "Filter": {
          "$ref": "#/definitions/authLdapSearchFilter"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Offset": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "entExternalDirectoryTestResponse": {
      "type": "object",
      "title": "Test responses sends back arbitrary JSON contents",
      "properties": {
        "DirectoryResponseJSON": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entFrontLoginConnectorsResponse": {
      "type": "object",
      "properties": {
        "Connectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entConnector"
          }
        }
      }
    },
    "entJobHookResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entJobVersion": {
      "type": "object",
      "properties": {
        "Date": {
          "type": "integer",
          "format": "int32"
        },
        "ID": {
          "type": "string"
        },
        "Job": {
          "$ref": "#/definitions/jobsJob"
        },
        "JobID": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        }
      }
    },
    "entListAccessTokensRequest": {
      "type": "object",
      "properties": {
        "ByUser": {
          "type": "string"
        }
      }
    },
    "entListActionTemplatesRequest": {
      "type": "object",
      "properties": {
        "All": {
          "type": "boolean"
        }
      }
    },
    "entListActionTemplatesResponse": {
      "type": "object",
      "properties": {
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entActionTemplate"
          }
        }
      }
    },
    "entListJobTemplatesRequest": {
      "type": "object",
      "properties": {
        "All": {
          "type": "boolean"
        }
      }
    },
    "entListJobTemplatesResponse": {
      "type": "object",
      "properties": {
        "Jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/jobsJob"
          }
        }
      }
    },
    "entListJobVersionsResponse": {
      "type": "object",
      "properties": {
        "Versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entJobVersion"
          }
        }
      }
    },
    "entListMetaTemplateResponse": {
      "type": "object",
      "properties": {
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entMetaTemplate"
          }
        }
      }
    },
    "entListSelectorTemplatesRequest": {
      "type": "object",
      "properties": {
        "Filter": {
          "type": "string"
        }
      }
    },
    "entListSelectorTemplatesResponse": {
      "type": "object",
      "properties": {
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entSelectorTemplate"
          }
        }
      }
    },
    "entListSitesResponse": {
      "type": "object",
      "properties": {
        "Sites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/installProxyConfig"
          }
        }
      }
    },
    "entMetaTemplate": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "Meta": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Policies": {
          "type": "array",
          "title": "Optional policies",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "entOAuth2ClientCollection": {
      "type": "object",
      "properties": {
        "staticClients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authOAuth2ClientConfig"
          }
        }
      }
    },
    "entOAuth2ClientResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entOAuth2ConnectorCollection": {
      "type": "object",
      "properties": {
        "connectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authOAuth2ConnectorConfig"
          }
        }
      }
    },
    "entOAuth2ConnectorResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entPersonalAccessTokenRequest": {
      "type": "object",
      "properties": {
        "AutoRefresh": {
          "type": "integer",
          "format": "int32"
        },
        "ExpiresAt": {
          "type": "string",
          "format": "int64"
        },
        "Label": {
          "type": "string"
        },
        "Scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserLogin": {
          "type": "string"
        }
      }
    },
    "entPersonalAccessTokenResponse": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "type": "string"
        }
      }
    },
    "entPlaygroundRequest": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string"
        },
        "CodeMime": {
          "type": "string"
        },
        "Input": {
          "$ref": "#/definitions/jobsActionMessage"
        },
        "LastOutputJsonBody": {
          "type": "string"
        }
      }
    },
    "entPlaygroundResponse": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string"
        },
        "CodeMime": {
          "type": "string"
        },
        "Input": {
          "$ref": "#/definitions/jobsActionMessage"
        },
        "LastOutputJsonBody": {
          "type": "string"
        },
        "Output": {
          "type": "string"
        }
      }
    },
    "entPutActionTemplateRequest": {
      "type": "object",
      "properties": {
        "Template": {
          "$ref": "#/definitions/entActionTemplate"
        }
      }
    },
    "entPutActionTemplateResponse": {
      "type": "object",
      "properties": {
        "Template": {
          "$ref": "#/definitions/entActionTemplate"
        }
      }
    },
    "entPutJobTemplateResponse": {
      "type": "object",
      "properties": {
        "Job": {
          "$ref": "#/definitions/jobsJob"
        }
      }
    },
    "entPutMetaTemplateRequest": {
      "type": "object",
      "properties": {
        "Template": {
          "$ref": "#/definitions/entMetaTemplate"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "entPutMetaTemplateResponse": {
      "type": "object",
      "properties": {
        "Template": {
          "$ref": "#/definitions/entMetaTemplate"
        }
      }
    },
    "entPutSelectorTemplateRequest": {
      "type": "object",
      "properties": {
        "Template": {
          "$ref": "#/definitions/entSelectorTemplate"
        }
      }
    },
    "entPutSelectorTemplateResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entRestoreJobVersionResponse": {
      "type": "object",
      "properties": {
        "Job": {
          "$ref": "#/definitions/jobsJob"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "entSelectorTemplate": {
      "type": "object",
      "properties": {
        "ActionOutputFilter": {
          "$ref": "#/definitions/jobsActionOutputFilter"
        },
        "AsFilter": {
          "type": "boolean"
        },
        "ContextMetaFilter": {
          "$ref": "#/definitions/jobsContextMetaFilter"
        },
        "DataSourceSelector": {
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "Description": {
          "type": "string"
        },
        "IdmSelector": {
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "Label": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "NodesSelector": {
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "TriggerFilter": {
          "$ref": "#/definitions/jobsTriggerFilter"
        }
      }
    },
    "idmACL": {
      "description": "ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role.\nThe context of how they apply can be fine-tuned by workspace.",
      "type": "object",
      "properties": {
        "Action": {
          "title": "Action on which this ACL provides control",
          "$ref": "#/definitions/idmACLAction"
        },
        "ID": {
          "type": "string",
          "title": "Unique ID of this ACL"
        },
        "NodeID": {
          "type": "string",
          "title": "Associated Node"
        },
        "RoleID": {
          "type": "string",
          "title": "Associated Role"
        },
        "WorkspaceID": {
          "type": "string",
          "title": "Associated Workspace"
        }
      }
    },
    "idmACLAction": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "title": "ACL Action name, most frequent values are \"read\" or \"write\""
        },
        "Value": {
          "type": "string",
          "title": "ACL Action value"
        }
      }
    },
    "idmPolicy": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/idmPolicyCondition"
          }
        },
        "description": {
          "type": "string"
        },
        "effect": {
          "$ref": "#/definitions/idmPolicyEffect"
        },
        "id": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "idmPolicyCondition": {
      "type": "object",
      "properties": {
        "jsonOptions": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "idmPolicyEffect": {
      "type": "string",
      "default": "unknown",
      "enum": [
        "unknown",
        "deny",
        "allow"
      ]
    },
    "idmPolicyGroup": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "LastUpdated": {
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "type": "string"
        },
        "OwnerUuid": {
          "type": "string"
        },
        "Policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmPolicy"
          }
        },
        "ResourceGroup": {
          "$ref": "#/definitions/idmPolicyResourceGroup"
        },
        "Uuid": {
          "type": "string"
        }
      }
    },
    "idmPolicyResourceGroup": {
      "type": "string",
      "default": "rest",
      "enum": [
        "rest",
        "acl",
        "oidc"
      ]
    },
    "idmRole": {
      "description": "Role represents a generic set of permissions that can be applied to any users or groups.",
      "type": "object",
      "properties": {
        "AutoApplies": {
          "type": "array",
          "title": "List of profiles (standard, shared, admin) on which the role will be automatically applied",
          "items": {
            "type": "string"
          }
        },
        "ForceOverride": {
          "description": "Is used in a stack of roles, this one will always be applied last.",
          "type": "boolean"
        },
        "GroupRole": {
          "type": "boolean",
          "title": "Whether this role is attached to a Group object"
        },
        "IsTeam": {
          "type": "boolean",
          "title": "Whether this role represents a user team or not"
        },
        "Label": {
          "type": "string",
          "title": "Label of this role"
        },
        "LastUpdated": {
          "type": "integer",
          "format": "int32",
          "title": "Last modification date of the role"
        },
        "Policies": {
          "type": "array",
          "title": "List of policies for securing this role access",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Whether the policies resolve into an editable state"
        },
        "UserRole": {
          "type": "boolean",
          "title": "Whether this role is attached to a User object"
        },
        "Uuid": {
          "type": "string",
          "title": "Unique identifier of this role"
        }
      }
    },
    "idmUser": {
      "type": "object",
      "title": "User can represent either a User or a Group",
      "properties": {
        "Attributes": {
          "type": "object",
          "title": "A free list of attributes",
          "additionalProperties": {
            "type": "string"
          }
        },
        "GroupLabel": {
          "type": "string",
          "title": "Label of the group, field is empty for users"
        },
        "GroupPath": {
          "type": "string",
          "title": "Path to the parent group"
        },
        "IsGroup": {
          "type": "boolean",
          "title": "Whether this object is a group or a user"
        },
        "LastConnected": {
          "type": "integer",
          "format": "int32",
          "title": "Last successful connection timestamp"
        },
        "Login": {
          "type": "string",
          "title": "User login is used to connect, field is empty for groups"
        },
        "OldPassword": {
          "type": "string",
          "title": "OldPassword must be set when a user updates her own password"
        },
        "Password": {
          "type": "string",
          "title": "Password can be passed to be updated (but never read back), field is empty for groups"
        },
        "Policies": {
          "type": "array",
          "title": "Policies securing access to this user",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "description": "Context-resolved to quickly check if user is editable or not.",
          "type": "boolean"
        },
        "Roles": {
          "type": "array",
          "title": "List of roles applied to this user or group",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "Uuid": {
          "type": "string",
          "title": "User unique identifier"
        }
      }
    },
    "idmWorkspace": {
      "description": "A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.",
      "type": "object",
      "properties": {
        "Attributes": {
          "type": "string",
          "title": "JSON-encoded list of attributes"
        },
        "Description": {
          "type": "string",
          "title": "Description of the workspace (max length 1000)"
        },
        "Label": {
          "type": "string",
          "title": "Label of the workspace (max length 500)"
        },
        "LastUpdated": {
          "type": "integer",
          "format": "int32",
          "title": "Last modification time"
        },
        "Policies": {
          "type": "array",
          "title": "Policies for securing access",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PoliciesContextEditable": {
          "type": "boolean",
          "title": "Context-resolved to quickly check if workspace is editable or not"
        },
        "RootNodes": {
          "type": "object",
          "title": "List of the Root Nodes in the tree that compose this workspace",
          "additionalProperties": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "RootUUIDs": {
          "type": "array",
          "title": "Quick list of the RootNodes uuids",
          "items": {
            "type": "string"
          }
        },
        "Scope": {
          "title": "Scope can be ADMIN, ROOM (=CELL) or LINK",
          "$ref": "#/definitions/idmWorkspaceScope"
        },
        "Slug": {
          "type": "string",
          "title": "Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)"
        },
        "UUID": {
          "type": "string",
          "title": "Unique identifier of the workspace"
        }
      }
    },
    "idmWorkspaceScope": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "ADMIN",
        "ROOM",
        "LINK"
      ]
    },
    "installProxyConfig": {
      "type": "object",
      "title": "ProxyConfig gives necessary URL and TLS configurations to start proxy",
      "properties": {
        "Binds": {
          "type": "array",
          "title": "A list of [host]:port to bind to",
          "items": {
            "type": "string"
          }
        },
        "Certificate": {
          "$ref": "#/definitions/installTLSCertificate"
        },
        "LetsEncrypt": {
          "$ref": "#/definitions/installTLSLetsEncrypt"
        },
        "Maintenance": {
          "type": "boolean",
          "title": "If set, this site will be in maintenance mode"
        },
        "MaintenanceConditions": {
          "type": "array",
          "title": "Append caddy directive to restrict maintenance mode",
          "items": {
            "type": "string"
          }
        },
        "ReverseProxyURL": {
          "type": "string",
          "title": "Optional URL of reverse proxy exposing this site"
        },
        "SSLRedirect": {
          "type": "boolean",
          "title": "If TLS is set, whether to automatically redirect each http://host:port to https://host:port"
        },
        "SelfSigned": {
          "$ref": "#/definitions/installTLSSelfSigned"
        }
      }
    },
    "installTLSCertificate": {
      "type": "object",
      "title": "TLSCertificate is a TLSConfig where user passes",
      "properties": {
        "CellsRootCA": {
          "type": "string"
        },
        "CertFile": {
          "type": "string"
        },
        "KeyFile": {
          "type": "string"
        }
      }
    },
    "installTLSLetsEncrypt": {
      "type": "object",
      "title": "TLSLetsEncrypt set up proxy to automatically get a valid certificate from let's encrypt servers",
      "properties": {
        "AcceptEULA": {
          "type": "boolean"
        },
        "Email": {
          "type": "string"
        },
        "StagingCA": {
          "type": "boolean"
        }
      }
    },
    "installTLSSelfSigned": {
      "type": "object",
      "title": "TLSSelfSigned generates a selfsigned certificate",
      "properties": {
        "Hostnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ipbanBannedConnection": {
      "type": "object",
      "properties": {
        "BanExpire": {
          "type": "string",
          "format": "int64"
        },
        "History": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipbanConnectionAttempt"
          }
        },
        "IP": {
          "type": "string"
        }
      }
    },
    "ipbanConnectionAttempt": {
      "type": "object",
      "properties": {
        "Details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "IP": {
          "type": "string"
        },
        "IsSuccess": {
          "type": "boolean"
        },
        "connectionTime": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ipbanIPsCollection": {
      "type": "object",
      "title": "Used for white list / black list",
      "properties": {
        "IPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ipbanListBansCollection": {
      "type": "object",
      "properties": {
        "Bans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipbanBannedConnection"
          }
        }
      }
    },
    "ipbanUnbanRequest": {
      "type": "object",
      "properties": {
        "IP": {
          "type": "string"
        }
      }
    },
    "ipbanUnbanResponse": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        }
      }
    },
    "jobsAction": {
      "type": "object",
      "properties": {
        "ActionOutputFilter": {
          "title": "Previous action output filter",
          "$ref": "#/definitions/jobsActionOutputFilter"
        },
        "BreakAfter": {
          "type": "boolean",
          "title": "Stop full chain now : do not carry on executing next actions"
        },
        "Bypass": {
          "type": "boolean",
          "title": "Bypass this action (forward input to output and do nothing)"
        },
        "ChainedActions": {
          "type": "array",
          "title": "Other actions to perform after this one is finished,\nusing the Output of this action as Input for the next.\nIf there are many, it is considered they can be triggered\nin parallel",
          "items": {
            "$ref": "#/definitions/jobsAction"
          }
        },
        "ChatEventFilter": {
          "title": "Filter values from ChatEvent",
          "$ref": "#/definitions/jobsChatEventFilter"
        },
        "ContextMetaFilter": {
          "title": "Metadata policy-based filter",
          "$ref": "#/definitions/jobsContextMetaFilter"
        },
        "DataFilter": {
          "title": "Filter values from JsonBody",
          "$ref": "#/definitions/jobsDataSelector"
        },
        "DataSelector": {
          "title": "Collect/select values from JsonBody",
          "$ref": "#/definitions/jobsDataSelector"
        },
        "DataSourceFilter": {
          "title": "DataSource objects filter",
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "DataSourceSelector": {
          "title": "DataSource objects collector",
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "Description": {
          "type": "string",
          "title": "User-defined comment for this action"
        },
        "FailedFilterActions": {
          "type": "array",
          "title": "If any Filter is used, next actions can be triggered on Failure\nThis adds ability to create conditional Yes/No branches",
          "items": {
            "$ref": "#/definitions/jobsAction"
          }
        },
        "ID": {
          "type": "string",
          "title": "String Identifier for specific action"
        },
        "IdmFilter": {
          "title": "Idm objects filter",
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "IdmSelector": {
          "title": "Idm objects collector",
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "Label": {
          "type": "string",
          "title": "User-defined label for this action"
        },
        "MergeAction": {
          "title": "CollectAction adds starts another chain after the whole ChainedAction/FailedFilterActions have been performed",
          "$ref": "#/definitions/jobsAction"
        },
        "NodesFilter": {
          "title": "Node Filter",
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "NodesSelector": {
          "title": "Nodes Selector",
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "Parameters": {
          "type": "object",
          "title": "Defined parameters for this action",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Timeout": {
          "type": "string",
          "title": "Optional timeout for this action"
        },
        "TriggerFilter": {
          "title": "Filter on specific triggers",
          "$ref": "#/definitions/jobsTriggerFilter"
        },
        "UsersFilter": {
          "title": "User Filter (deprecated in favor of IdmSelector)",
          "$ref": "#/definitions/jobsUsersSelector"
        },
        "UsersSelector": {
          "title": "Users Selector (deprecated in favor of IdmSelector)",
          "$ref": "#/definitions/jobsUsersSelector"
        }
      }
    },
    "jobsActionLog": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/jobsAction"
        },
        "InputMessage": {
          "$ref": "#/definitions/jobsActionMessage"
        },
        "OutputMessage": {
          "$ref": "#/definitions/jobsActionMessage"
        }
      }
    },
    "jobsActionMessage": {
      "type": "object",
      "title": "Message passed along from one action to another, main properties\nare modified by the various actions.\nOutputChain is being stacked up when passing through actions",
      "properties": {
        "Acls": {
          "type": "array",
          "title": "One or more ACL",
          "items": {
            "$ref": "#/definitions/idmACL"
          }
        },
        "Activities": {
          "type": "array",
          "title": "One or more Activity",
          "items": {
            "$ref": "#/definitions/activityObject"
          }
        },
        "DataSources": {
          "type": "array",
          "title": "One or more DataSource",
          "items": {
            "$ref": "#/definitions/objectDataSource"
          }
        },
        "Event": {
          "title": "Initial event that triggered the Job",
          "$ref": "#/definitions/protobufAny"
        },
        "Nodes": {
          "type": "array",
          "title": "One or more Node",
          "items": {
            "$ref": "#/definitions/treeNode"
          }
        },
        "OutputChain": {
          "type": "array",
          "title": "Stack of ActionOutput messages appended by all previous actions",
          "items": {
            "$ref": "#/definitions/jobsActionOutput"
          }
        },
        "Roles": {
          "type": "array",
          "title": "One or more Role",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "Users": {
          "type": "array",
          "title": "One or more User",
          "items": {
            "$ref": "#/definitions/idmUser"
          }
        },
        "Workspaces": {
          "type": "array",
          "title": "One or more Workspace",
          "items": {
            "$ref": "#/definitions/idmWorkspace"
          }
        }
      }
    },
    "jobsActionOutput": {
      "type": "object",
      "title": "Standard output of an action. Success value is required\nother are optional",
      "properties": {
        "ErrorString": {
          "type": "string",
          "title": "Error"
        },
        "Ignored": {
          "type": "boolean",
          "title": "If action was returned WithIgnore()"
        },
        "JsonBody": {
          "type": "string",
          "format": "byte",
          "title": "Arbitrary JSON-encoded bytes"
        },
        "RawBody": {
          "type": "string",
          "format": "byte",
          "title": "Arbitrary bytes sequence"
        },
        "StringBody": {
          "type": "string",
          "title": "Arbitrary string"
        },
        "Success": {
          "type": "boolean",
          "title": "True if action succeeded"
        },
        "Time": {
          "type": "integer",
          "format": "int32",
          "title": "Time taken to run the action"
        },
        "Vars": {
          "description": "Vars container, values are json-encoded.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "jobsActionOutputFilter": {
      "type": "object",
      "title": "ActionOutputFilter can be used to filter last message output",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Query built from ActionOutputSingleQuery",
          "$ref": "#/definitions/serviceQuery"
        }
      }
    },
    "jobsChatEventFilter": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Query used to compute output object or list of objects",
          "$ref": "#/definitions/serviceQuery"
        }
      }
    },
    "jobsContextMetaFilter": {
      "type": "object",
      "title": "PolicyContextFilter can be used to filter request metadata",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Can be built with ContextMetaSingleQuery",
          "$ref": "#/definitions/serviceQuery"
        },
        "Type": {
          "title": "Type of context filter",
          "$ref": "#/definitions/jobsContextMetaFilterType"
        }
      }
    },
    "jobsContextMetaFilterType": {
      "type": "string",
      "default": "RequestMeta",
      "enum": [
        "RequestMeta",
        "ContextUser"
      ]
    },
    "jobsDataSelector": {
      "type": "object",
      "properties": {
        "ClearInput": {
          "type": "boolean",
          "title": "Clear previous selection"
        },
        "Collect": {
          "type": "boolean",
          "title": "Collect results"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "FanOutInput": {
          "type": "boolean",
          "title": "Ignore query and just fan out input.LastOutput.JsonBody"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Query used to compute output object or list of objects",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        }
      }
    },
    "jobsDataSourceSelector": {
      "type": "object",
      "title": "Selector/Filter for DataSource objects",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Select all"
        },
        "ClearInput": {
          "type": "boolean",
          "title": "Clear previous selection"
        },
        "Collect": {
          "type": "boolean",
          "title": "Collect results"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "FanOutInput": {
          "type": "boolean",
          "title": "Ignore query and just fan out input.DataSources"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Composition of DataSourceSingleQueries",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        },
        "Type": {
          "title": "Selector type, either DataSource or Object service",
          "$ref": "#/definitions/jobsDataSourceSelectorType"
        }
      }
    },
    "jobsDataSourceSelectorType": {
      "type": "string",
      "default": "DataSource",
      "enum": [
        "DataSource",
        "Object"
      ]
    },
    "jobsDeleteJobResponse": {
      "type": "object",
      "properties": {
        "DeleteCount": {
          "type": "integer",
          "format": "int32"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "jobsIdmSelector": {
      "type": "object",
      "title": "Generic container for select/filter idm objects",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Load all objects"
        },
        "ClearInput": {
          "type": "boolean",
          "title": "Clear previous selection"
        },
        "Collect": {
          "type": "boolean",
          "title": "Pass a slice of objects to one action, or trigger all actions in parallel"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "FanOutInput": {
          "type": "boolean",
          "title": "Ignore query and just fan out input.[Type]"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Serialized search query",
          "$ref": "#/definitions/serviceQuery"
        },
        "Range": {
          "title": "Handle ranges",
          "$ref": "#/definitions/jobsSelectorRange"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        },
        "Type": {
          "title": "Type of objects to look for",
          "$ref": "#/definitions/jobsIdmSelectorType"
        }
      }
    },
    "jobsIdmSelectorType": {
      "type": "string",
      "title": "Possible values for IdmSelector.Type",
      "default": "User",
      "enum": [
        "User",
        "Role",
        "Workspace",
        "Acl"
      ]
    },
    "jobsJob": {
      "type": "object",
      "properties": {
        "Actions": {
          "type": "array",
          "title": "Chain of actions to perform",
          "items": {
            "$ref": "#/definitions/jobsAction"
          }
        },
        "AutoClean": {
          "type": "boolean",
          "title": "Remove job automatically once it is finished (success only)"
        },
        "AutoRestart": {
          "type": "boolean",
          "title": "Start task as soon as server is started"
        },
        "AutoStart": {
          "type": "boolean",
          "title": "Start task as soon as job is inserted"
        },
        "ChatEventFilter": {
          "title": "Filter values from ChatEvent",
          "$ref": "#/definitions/jobsChatEventFilter"
        },
        "ContextMetaFilter": {
          "title": "Event Context Filter",
          "$ref": "#/definitions/jobsContextMetaFilter"
        },
        "CreatedAt": {
          "type": "integer",
          "format": "int32",
          "title": "Timestamp for creation time"
        },
        "Custom": {
          "type": "boolean",
          "title": "Job created by application or by administrator"
        },
        "DataSourceFilter": {
          "title": "DataSource objects filter",
          "$ref": "#/definitions/jobsDataSourceSelector"
        },
        "EventNames": {
          "type": "array",
          "title": "How the job will be triggered.\nOne of these must be set (not exclusive)\nListen to a given set of events",
          "items": {
            "type": "string"
          }
        },
        "Hooks": {
          "type": "array",
          "title": "Expose this job through one or more-userspace APIs",
          "items": {
            "$ref": "#/definitions/jobsJobHook"
          }
        },
        "ID": {
          "type": "string",
          "title": "Unique ID for this Job"
        },
        "IdmFilter": {
          "title": "Idm objects filter",
          "$ref": "#/definitions/jobsIdmSelector"
        },
        "Inactive": {
          "type": "boolean",
          "title": "Admin can temporarily disable this job"
        },
        "Label": {
          "type": "string",
          "title": "Human-readable Label"
        },
        "Languages": {
          "type": "array",
          "title": "Optional list of languages detected in the context at launch time",
          "items": {
            "type": "string"
          }
        },
        "MaxConcurrency": {
          "type": "integer",
          "format": "int32",
          "title": "Task properties"
        },
        "MergeAction": {
          "title": "Collect chain of actions into a merged output",
          "$ref": "#/definitions/jobsAction"
        },
        "Metadata": {
          "description": "Additional user-defined metadata, can be used for icon, documentation, pre-requisites, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ModifiedAt": {
          "type": "integer",
          "format": "int32",
          "title": "Timestamp for modification time"
        },
        "NodeEventFilter": {
          "title": "Filter out specific events",
          "$ref": "#/definitions/jobsNodesSelector"
        },
        "Owner": {
          "type": "string",
          "title": "Who created this Job"
        },
        "Parameters": {
          "type": "array",
          "title": "Job-level parameters that can be passed to underlying actions",
          "items": {
            "$ref": "#/definitions/jobsJobParameter"
          }
        },
        "ResourcesDependencies": {
          "type": "array",
          "title": "Additional dependencies that may be required when running the job",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "Schedule": {
          "title": "Schedule a periodic repetition",
          "$ref": "#/definitions/jobsSchedule"
        },
        "Tasks": {
          "type": "array",
          "title": "Filled with currently running tasks",
          "items": {
            "$ref": "#/definitions/jobsTask"
          }
        },
        "TasksSilentUpdate": {
          "type": "boolean",
          "title": "Do not send notification on task update"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout any running job"
        },
        "UserEventFilter": {
          "title": "Deprecated in favor of more generic IdmSelector",
          "$ref": "#/definitions/jobsUsersSelector"
        },
        "VersionMeta": {
          "type": "object",
          "title": "Additional Versioning Metadata",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "jobsJobHook": {
      "type": "object",
      "title": "Dynamically expose a job trigger via API",
      "properties": {
        "AllowOverridePresets": {
          "type": "boolean",
          "title": "Allow trigger parameters to override default presets"
        },
        "ApiSlug": {
          "type": "string",
          "title": "Custom ApiSlug, otherwise use the job UUID"
        },
        "Metadata": {
          "type": "object",
          "title": "Additional arbitrary metadata attached to this hook",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Policies": {
          "type": "array",
          "title": "Set permissions for accessing this endpoint",
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy"
          }
        },
        "PresetParameters": {
          "type": "object",
          "title": "Preset parameters values when calling this endpoint. May be overriden by a map[string]string in the body",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "jobsJobParameter": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Additional description"
        },
        "JsonChoices": {
          "type": "string",
          "title": "Additional data used by GUI elements"
        },
        "Mandatory": {
          "type": "boolean",
          "title": "If mandatory, job cannot start without a value"
        },
        "Name": {
          "type": "string",
          "title": "Parameter name"
        },
        "Type": {
          "type": "string",
          "title": "Parameter type used in GUI forms"
        },
        "Value": {
          "type": "string",
          "title": "Value saved for this parameter"
        }
      }
    },
    "jobsNodesSelector": {
      "type": "object",
      "title": "/////////////////\nJOB  SERVICE  //\n/////////////////",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Select all files - ignore any other condition"
        },
        "ClearInput": {
          "type": "boolean",
          "title": "Clear previous selection"
        },
        "Collect": {
          "type": "boolean",
          "title": "Whether to trigger one action per node or one action\nwith all nodes as selection"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "FanOutInput": {
          "type": "boolean",
          "title": "Ignore query and just fan out input.Nodes"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Pathes": {
          "type": "array",
          "title": "Preset list of node pathes",
          "items": {
            "type": "string"
          }
        },
        "Query": {
          "title": "Query to apply to select users (or filter a given node passed by event)",
          "$ref": "#/definitions/serviceQuery"
        },
        "Range": {
          "title": "Handle ranges",
          "$ref": "#/definitions/jobsSelectorRange"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        }
      }
    },
    "jobsPutJobRequest": {
      "type": "object",
      "properties": {
        "Job": {
          "$ref": "#/definitions/jobsJob"
        }
      }
    },
    "jobsPutJobResponse": {
      "type": "object",
      "properties": {
        "Job": {
          "$ref": "#/definitions/jobsJob"
        }
      }
    },
    "jobsSchedule": {
      "type": "object",
      "properties": {
        "Iso8601MinDelta": {
          "type": "string",
          "title": "Minimum time between two runs"
        },
        "Iso8601Schedule": {
          "description": "ISO 8601 Description of the scheduling for instance \"R2/2015-06-04T19:25:16.828696-07:00/PT4S\"\nwhere first part is the number of repetitions (if 0, infinite repetition), \nsecond part the starting date and last part, the duration between 2 occurrences.",
          "type": "string"
        }
      }
    },
    "jobsSelectorRange": {
      "type": "object",
      "properties": {
        "Limit": {
          "type": "string",
          "title": "Limit number of results - use string to allow templating"
        },
        "Offset": {
          "type": "string",
          "title": "Start offset - use string to allow templating"
        },
        "OrderBy": {
          "type": "string",
          "title": "OrderBy a given field of the object"
        },
        "OrderDir": {
          "type": "string",
          "title": "Order direction (asc/desc)"
        }
      }
    },
    "jobsTask": {
      "type": "object",
      "properties": {
        "ActionsLogs": {
          "type": "array",
          "title": "Logs of all the actions performed",
          "items": {
            "$ref": "#/definitions/jobsActionLog"
          }
        },
        "CanPause": {
          "type": "boolean",
          "title": "Can be paused/resumed"
        },
        "CanStop": {
          "type": "boolean",
          "title": "Can be interrupted"
        },
        "EndTime": {
          "type": "integer",
          "format": "int32"
        },
        "HasProgress": {
          "type": "boolean",
          "title": "Tasks publish a progress"
        },
        "ID": {
          "type": "string"
        },
        "JobID": {
          "type": "string"
        },
        "Progress": {
          "type": "number",
          "format": "float",
          "title": "Float value of the progress between 0 and 1"
        },
        "StartTime": {
          "type": "integer",
          "format": "int32"
        },
        "Status": {
          "$ref": "#/definitions/jobsTaskStatus"
        },
        "StatusMessage": {
          "type": "string"
        },
        "TriggerOwner": {
          "type": "string"
        }
      }
    },
    "jobsTaskStatus": {
      "type": "string",
      "title": "/////////////////\nTASK SERVICE  //\n/////////////////",
      "default": "Unknown",
      "enum": [
        "Unknown",
        "Idle",
        "Running",
        "Finished",
        "Interrupted",
        "Paused",
        "Any",
        "Error",
        "Queued"
      ]
    },
    "jobsTriggerFilter": {
      "type": "object",
      "title": "Filter for events, can be applied on action branches",
      "properties": {
        "Description": {
          "type": "string",
          "title": "Filter additional description"
        },
        "Label": {
          "type": "string",
          "title": "Filter custom label"
        },
        "Query": {
          "title": "Filter type",
          "$ref": "#/definitions/serviceQuery"
        }
      }
    },
    "jobsUsersSelector": {
      "type": "object",
      "title": "Select or filter users - should be replaced by more generic IdmSelector",
      "properties": {
        "All": {
          "type": "boolean",
          "title": "Select all users"
        },
        "ClearInput": {
          "type": "boolean",
          "title": "Clear previous selection"
        },
        "Collect": {
          "type": "boolean",
          "title": "Wether to trigger one action per user or one action\nwith all user as a selection"
        },
        "Description": {
          "type": "string",
          "title": "Selector additional description"
        },
        "Label": {
          "type": "string",
          "title": "Selector custom label"
        },
        "Query": {
          "title": "Filter users using this query",
          "$ref": "#/definitions/serviceQuery"
        },
        "Timeout": {
          "type": "string",
          "title": "Optional Timeout for this selector"
        },
        "Users": {
          "type": "array",
          "title": "Preset set of Users",
          "items": {
            "$ref": "#/definitions/idmUser"
          }
        }
      }
    },
    "logListLogRequest": {
      "description": "ListLogRequest launches a parameterised query in the log repository and streams the results.",
      "type": "object",
      "properties": {
        "Format": {
          "$ref": "#/definitions/ListLogRequestLogFormat"
        },
        "Page": {
          "type": "integer",
          "format": "int32",
          "title": "Start at page"
        },
        "Query": {
          "type": "string",
          "title": "Bleve-type Query stsring"
        },
        "Size": {
          "type": "integer",
          "format": "int32",
          "title": "Number of results"
        }
      }
    },
    "logLogMessage": {
      "description": "LogMessage is the format used to transmit log messages to clients via the REST API.",
      "type": "object",
      "properties": {
        "GroupPath": {
          "type": "string"
        },
        "HttpProtocol": {
          "type": "string"
        },
        "JsonZaps": {
          "type": "string",
          "title": "Other Unkown Fields"
        },
        "Level": {
          "type": "string"
        },
        "Logger": {
          "type": "string"
        },
        "Msg": {
          "type": "string"
        },
        "MsgId": {
          "type": "string",
          "title": "Pydio specific"
        },
        "NodePath": {
          "type": "string"
        },
        "NodeUuid": {
          "type": "string",
          "title": "Tree Info"
        },
        "OperationLabel": {
          "type": "string"
        },
        "OperationUuid": {
          "type": "string",
          "title": "High Level Operation Info"
        },
        "Profile": {
          "type": "string"
        },
        "RemoteAddress": {
          "type": "string",
          "title": "Client info"
        },
        "RoleUuids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SchedulerJobUuid": {
          "type": "string"
        },
        "SchedulerTaskActionPath": {
          "type": "string"
        },
        "SchedulerTaskUuid": {
          "type": "string"
        },
        "SpanParentUuid": {
          "type": "string"
        },
        "SpanRootUuid": {
          "type": "string"
        },
        "SpanUuid": {
          "type": "string",
          "title": "Span Info"
        },
        "TransferSize": {
          "type": "string",
          "format": "int64"
        },
        "Ts": {
          "type": "integer",
          "format": "int32",
          "title": "Generic zap fields"
        },
        "UserAgent": {
          "type": "string"
        },
        "UserName": {
          "type": "string",
          "title": "User Info"
        },
        "UserUuid": {
          "type": "string"
        },
        "WsScope": {
          "type": "string"
        },
        "WsUuid": {
          "type": "string"
        }
      }
    },
    "logRelType": {
      "description": "Relative links types.\nNote that First is time.Now() and last time.Unix(0).\nWe added an unused NONE enum with value 0 to workaround 0 issues between JSON and proto3.",
      "type": "string",
      "default": "NONE",
      "enum": [
        "NONE",
        "FIRST",
        "PREV",
        "NEXT",
        "LAST"
      ]
    },
    "logTimeRangeCursor": {
      "description": "Ease implementation of data navigation for a chart.",
      "type": "object",
      "properties": {
        "Count": {
          "type": "integer",
          "format": "int32"
        },
        "RefTime": {
          "type": "integer",
          "format": "int32"
        },
        "Rel": {
          "$ref": "#/definitions/logRelType"
        }
      }
    },
    "logTimeRangeRequest": {
      "description": "TimeRangeRequest contains the parameter to configure the query to \nretrieve the number of audit events of this type for a given time range\ndefined by last timestamp and a range type.",
      "type": "object",
      "properties": {
        "MsgId": {
          "type": "string",
          "title": "Type of event we are auditing"
        },
        "RefTime": {
          "type": "integer",
          "format": "int32",
          "title": "Upper bound for our request"
        },
        "TimeRangeType": {
          "type": "string",
          "title": "Known types: H, D, W, M or Y"
        }
      }
    },
    "logTimeRangeResult": {
      "description": "TimeRangeResult represents one point of a graph.",
      "type": "object",
      "properties": {
        "Count": {
          "type": "integer",
          "format": "int32",
          "title": "nb of occurrences found within this range"
        },
        "End": {
          "type": "integer",
          "format": "int32",
          "title": "end timestamp"
        },
        "Name": {
          "type": "string",
          "title": "a label for this time range"
        },
        "Relevance": {
          "type": "integer",
          "format": "int32",
          "title": "a score between 1 and 100 that gives the relevance of this result:\nif End \u003e now, we ponderate the returned count with the duration of the last time range\nfor instance for a hour range if now is 6PM, last count will be \nmultiplied by 4/3 and have a relevance of 75. \nRelevance will be almost always equals to 100"
        },
        "Start": {
          "type": "integer",
          "format": "int32",
          "title": "begin timestamp"
        }
      }
    },
    "objectDataSource": {
      "type": "object",
      "title": "DataSource Object description",
      "properties": {
        "ApiKey": {
          "type": "string",
          "title": "Corresponding objects service api key"
        },
        "ApiSecret": {
          "type": "string",
          "title": "Corresponding objects service api secret"
        },
        "CreationDate": {
          "type": "integer",
          "format": "int32",
          "title": "Data Source creation date"
        },
        "Disabled": {
          "type": "boolean",
          "title": "Whether this data source is disabled or running"
        },
        "EncryptionKey": {
          "type": "string",
          "title": "Encryption key used for encrypting data"
        },
        "EncryptionMode": {
          "title": "Type of encryption applied before sending data to storage",
          "$ref": "#/definitions/objectEncryptionMode"
        },
        "FlatStorage": {
          "type": "boolean",
          "title": "Store data in flat format (object-storage like)"
        },
        "LastSynchronizationDate": {
          "type": "integer",
          "format": "int32",
          "title": "Data Source last synchronization date"
        },
        "Name": {
          "type": "string",
          "title": "Name of the data source (max length 34)"
        },
        "ObjectsBaseFolder": {
          "type": "string",
          "title": "Corresponding objects service base folder inside the bucket"
        },
        "ObjectsBucket": {
          "type": "string",
          "title": "Corresponding objects service bucket"
        },
        "ObjectsHost": {
          "type": "string",
          "title": "Corresponding objects service host"
        },
        "ObjectsPort": {
          "type": "integer",
          "format": "int32",
          "title": "Corresponding objects service port"
        },
        "ObjectsSecure": {
          "type": "boolean",
          "title": "Corresponding objects service connection type"
        },
        "ObjectsServiceName": {
          "type": "string",
          "title": "Corresponding objects service name (underlying s3 service)"
        },
        "PeerAddress": {
          "type": "string",
          "title": "Peer address of the data source"
        },
        "SkipSyncOnRestart": {
          "type": "boolean",
          "title": "Do not trigger resync at start"
        },
        "StorageConfiguration": {
          "type": "object",
          "title": "List of key values describing storage configuration",
          "additionalProperties": {
            "type": "string"
          }
        },
        "StorageType": {
          "title": "Type of underlying storage (LOCAL, S3, AZURE, GCS)",
          "$ref": "#/definitions/objectStorageType"
        },
        "VersioningPolicyName": {
          "type": "string",
          "title": "Versioning policy describes how files are kept in the versioning queue"
        },
        "Watch": {
          "type": "boolean",
          "title": "Not implemented, whether to watch for underlying changes on the FS"
        }
      }
    },
    "objectEncryptionMode": {
      "type": "string",
      "title": "Type of Encryption",
      "default": "CLEAR",
      "enum": [
        "CLEAR",
        "MASTER",
        "USER",
        "USER_PWD"
      ]
    },
    "objectStorageType": {
      "type": "string",
      "title": "Type of Gateway",
      "default": "LOCAL",
      "enum": [
        "LOCAL",
        "S3",
        "SMB",
        "CELLS",
        "AZURE",
        "GCS",
        "B2",
        "MANTA",
        "SIA"
      ]
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "type": "object",
      "properties": {
        "@type": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "reportsAuditedWorkspace": {
      "type": "object",
      "properties": {
        "BrokenLink": {
          "type": "boolean"
        },
        "BrokenWorkspace": {
          "type": "boolean"
        },
        "OwnerUser": {
          "$ref": "#/definitions/idmUser"
        },
        "RolesRead": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "RolesWrite": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/idmRole"
          }
        },
        "UsersReadCount": {
          "type": "integer",
          "format": "int32"
        },
        "UsersWriteCount": {
          "type": "integer",
          "format": "int32"
        },
        "Workspace": {
          "$ref": "#/definitions/idmWorkspace"
        }
      }
    },
    "reportsListReportsResponse": {
      "type": "object",
      "properties": {
        "ReportDates": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "reportsSharedResource": {
      "type": "object",
      "properties": {
        "ChildrenSharedResources": {
          "type": "integer",
          "format": "int32"
        },
        "Node": {
          "$ref": "#/definitions/treeNode"
        },
        "ReportDate": {
          "type": "integer",
          "format": "int32"
        },
        "Workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportsAuditedWorkspace"
          }
        }
      }
    },
    "reportsSharedResourceShareType": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "WORKSPACE",
        "CELL",
        "LINK"
      ]
    },
    "reportsSharedResourcesRequest": {
      "type": "object",
      "properties": {
        "LastUpdatedBefore": {
          "type": "integer",
          "format": "int32"
        },
        "LastUpdatedSince": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "NodeSizeMin": {
          "type": "integer",
          "format": "int32"
        },
        "NodeType": {
          "$ref": "#/definitions/treeNodeType"
        },
        "Offset": {
          "type": "integer",
          "format": "int32",
          "title": "Listing options"
        },
        "OwnerUUID": {
          "type": "string"
        },
        "ReportDate": {
          "type": "integer",
          "format": "int32"
        },
        "RolesReadAND": {
          "type": "boolean"
        },
        "RolesReadUUIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RootPath": {
          "type": "string",
          "title": "Filter by root path"
        },
        "ShareType": {
          "$ref": "#/definitions/reportsSharedResourceShareType"
        },
        "UsersReadCountMax": {
          "type": "integer",
          "format": "int32"
        },
        "UsersReadCountMin": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "reportsSharedResourcesResponse": {
      "type": "object",
      "properties": {
        "Facets": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Offset": {
          "type": "integer",
          "format": "int32"
        },
        "Resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportsSharedResource"
          }
        },
        "Total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "restDeleteResponse": {
      "type": "object",
      "title": "Generic Message",
      "properties": {
        "NumRows": {
          "type": "string",
          "format": "int64",
          "title": "Number of records deleted during operation"
        },
        "Success": {
          "type": "boolean",
          "title": "If delete was successfull"
        }
      }
    },
    "restError": {
      "type": "object",
      "title": "Generic error message",
      "properties": {
        "Code": {
          "type": "string",
          "title": "Unique ID of the error"
        },
        "Detail": {
          "type": "string",
          "title": "Human-readable, longer description"
        },
        "Meta": {
          "type": "object",
          "title": "Additional Metadata",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Source": {
          "type": "string",
          "title": "Cells service name or other quickly useful info"
        },
        "Title": {
          "type": "string",
          "title": "Human-readable, short label"
        }
      }
    },
    "restLogMessageCollection": {
      "type": "object",
      "title": "Collection of serialized log messages",
      "properties": {
        "Logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/logLogMessage"
          }
        }
      }
    },
    "restRevokeResponse": {
      "type": "object",
      "title": "Rest response",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Success": {
          "type": "boolean"
        }
      }
    },
    "restTimeRangeResultCollection": {
      "type": "object",
      "title": "Collection of serialized aggregated result of time range request \nwith a cursor to ease navigation implementation",
      "properties": {
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/logTimeRangeCursor"
          }
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/logTimeRangeResult"
          }
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "serviceOperationType": {
      "type": "string",
      "default": "OR",
      "enum": [
        "OR",
        "AND"
      ]
    },
    "serviceQuery": {
      "type": "object",
      "properties": {
        "Limit": {
          "type": "string",
          "format": "int64"
        },
        "Offset": {
          "type": "string",
          "format": "int64"
        },
        "Operation": {
          "$ref": "#/definitions/serviceOperationType"
        },
        "ResourcePolicyQuery": {
          "$ref": "#/definitions/serviceResourcePolicyQuery"
        },
        "SortDesc": {
          "type": "boolean"
        },
        "SortField": {
          "type": "string"
        },
        "SubQueries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "groupBy": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "serviceResourcePolicy": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/serviceResourcePolicyAction"
        },
        "Effect": {
          "$ref": "#/definitions/serviceResourcePolicyPolicyEffect"
        },
        "JsonConditions": {
          "type": "string"
        },
        "Resource": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "serviceResourcePolicyAction": {
      "type": "string",
      "default": "ANY",
      "enum": [
        "ANY",
        "OWNER",
        "READ",
        "WRITE",
        "EDIT_RULES"
      ]
    },
    "serviceResourcePolicyPolicyEffect": {
      "type": "string",
      "default": "deny",
      "enum": [
        "deny",
        "allow"
      ]
    },
    "serviceResourcePolicyQuery": {
      "type": "object",
      "properties": {
        "Any": {
          "type": "boolean"
        },
        "Empty": {
          "type": "boolean"
        },
        "Subjects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "treeChangeLog": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "string",
          "format": "byte",
          "title": "Arbitrary additional data"
        },
        "Description": {
          "type": "string",
          "title": "Human-readable description of what happened"
        },
        "Event": {
          "title": "Event that triggered this change",
          "$ref": "#/definitions/treeNodeChangeEvent"
        },
        "Location": {
          "title": "Actual location of the stored version",
          "$ref": "#/definitions/treeNode"
        },
        "MTime": {
          "type": "string",
          "format": "int64",
          "title": "Unix Timestamp"
        },
        "OwnerUuid": {
          "type": "string",
          "title": "Who performed this action"
        },
        "Size": {
          "type": "string",
          "format": "int64",
          "title": "Content Size at that moment"
        },
        "Uuid": {
          "type": "string",
          "title": "Unique commit ID"
        }
      }
    },
    "treeNode": {
      "type": "object",
      "properties": {
        "AppearsIn": {
          "type": "array",
          "title": "Can be used for output when node is appearing in multiple workspaces",
          "items": {
            "$ref": "#/definitions/treeWorkspaceRelativePath"
          }
        },
        "Commits": {
          "type": "array",
          "title": "List of successive commits",
          "items": {
            "$ref": "#/definitions/treeChangeLog"
          }
        },
        "Etag": {
          "type": "string",
          "title": "Hash of the content if node is a LEAF, Uuid or"
        },
        "MTime": {
          "type": "string",
          "format": "int64",
          "title": "Last modification Timestamp"
        },
        "MetaStore": {
          "type": "object",
          "title": "------------------------------------\nThen a free K =\u003e V representation of any kind of metadata\n------------------------------------",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Mode": {
          "type": "integer",
          "format": "int32",
          "title": "Permission mode, like 0777"
        },
        "Path": {
          "type": "string"
        },
        "Size": {
          "type": "string",
          "format": "int64",
          "title": "Size of the file, or cumulated size of folder"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeType"
        },
        "Uuid": {
          "type": "string",
          "title": "------------------------------------\nCore identification of the node\n------------------------------------"
        }
      }
    },
    "treeNodeChangeEvent": {
      "type": "object",
      "properties": {
        "Metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Optimistic": {
          "type": "boolean"
        },
        "Silent": {
          "type": "boolean"
        },
        "Source": {
          "$ref": "#/definitions/treeNode"
        },
        "Target": {
          "$ref": "#/definitions/treeNode"
        },
        "Type": {
          "$ref": "#/definitions/NodeChangeEventEventType"
        }
      }
    },
    "treeNodeType": {
      "type": "string",
      "title": "==========================================================\n* Standard Messages\n==========================================================",
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "LEAF",
        "COLLECTION"
      ]
    },
    "treeVersioningKeepPeriod": {
      "type": "object",
      "properties": {
        "IntervalStart": {
          "type": "string"
        },
        "MaxNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "treeVersioningNodeDeletedStrategy": {
      "type": "string",
      "default": "KeepAll",
      "enum": [
        "KeepAll",
        "KeepLast",
        "KeepNone"
      ]
    },
    "treeVersioningPolicy": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "IgnoreFilesGreaterThan": {
          "type": "string",
          "format": "int64"
        },
        "KeepPeriods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeVersioningKeepPeriod"
          }
        },
        "MaxSizePerFile": {
          "type": "string",
          "format": "int64"
        },
        "MaxTotalSize": {
          "type": "string",
          "format": "int64"
        },
        "Name": {
          "type": "string"
        },
        "NodeDeletedStrategy": {
          "$ref": "#/definitions/treeVersioningNodeDeletedStrategy"
        },
        "Uuid": {
          "type": "string"
        },
        "VersionsDataSourceBucket": {
          "type": "string"
        },
        "VersionsDataSourceName": {
          "type": "string"
        }
      }
    },
    "treeWorkspaceRelativePath": {
      "type": "object",
      "title": "Used in AppearsIn to signal a node is\nappearing in multiple workspaces in the current context",
      "properties": {
        "Path": {
          "type": "string",
          "title": "Relative Path inside workspace"
        },
        "WsLabel": {
          "type": "string",
          "title": "Workspace Label"
        },
        "WsScope": {
          "type": "string",
          "title": "Workspace Scope"
        },
        "WsSlug": {
          "type": "string",
          "title": "Workspace slug"
        },
        "WsUuid": {
          "type": "string",
          "title": "Workspace Id"
        }
      }
    }
  },
  "responses": {
    "401": {
      "description": "User is not authenticated",
      "schema": {
        "$ref": "#/definitions/restError"
      }
    },
    "403": {
      "description": "User has no permissions to access this particular resource",
      "schema": {
        "$ref": "#/definitions/restError"
      }
    },
    "404": {
      "description": "Resource does not exists in the system",
      "schema": {
        "$ref": "#/definitions/restError"
      }
    },
    "500": {
      "description": "An internal error occurred in the backend",
      "schema": {
        "$ref": "#/definitions/restError"
      }
    }
  },
  "tags": [
    {
      "name": "EnterpriseConfigService"
    },
    {
      "name": "EnterprisePolicyService"
    },
    {
      "name": "EnterpriseLogService"
    },
    {
      "name": "SchedulerService"
    },
    {
      "name": "LicenseService"
    },
    {
      "name": "AuditDataService"
    },
    {
      "name": "EnterpriseFrontendService"
    },
    {
      "name": "EnterpriseTokenService"
    },
    {
      "name": "EnterpriseTemplatesService"
    }
  ],
  "externalDocs": {
    "description": "More about Pydio Cells Apis",
    "url": "https://pydio.com"
  }
}