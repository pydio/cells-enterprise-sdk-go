// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthOAuth2ConnectorConfig auth o auth2 connector config
//
// swagger:model authOAuth2ConnectorConfig
type AuthOAuth2ConnectorConfig struct {

	// configbitbucket
	Configbitbucket *AuthOAuth2ConnectorBitbucketConfig `json:"configbitbucket,omitempty"`

	// configgithub
	Configgithub *AuthOAuth2ConnectorGithubConfig `json:"configgithub,omitempty"`

	// configgitlab
	Configgitlab *AuthOAuth2ConnectorGitlabConfig `json:"configgitlab,omitempty"`

	// configldap
	Configldap *AuthLdapServerConfig `json:"configldap,omitempty"`

	// configlinkedin
	Configlinkedin *AuthOAuth2ConnectorLinkedinConfig `json:"configlinkedin,omitempty"`

	// configmicrosoft
	Configmicrosoft *AuthOAuth2ConnectorMicrosoftConfig `json:"configmicrosoft,omitempty"`

	// configoauth
	Configoauth *AuthOAuth2ConnectorOAuthConfig `json:"configoauth,omitempty"`

	// configoidc
	Configoidc *AuthOAuth2ConnectorOIDCConfig `json:"configoidc,omitempty"`

	// configpydio
	Configpydio *AuthOAuth2ConnectorPydioConfig `json:"configpydio,omitempty"`

	// configsaml
	Configsaml *AuthOAuth2ConnectorSAMLConfig `json:"configsaml,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// mapping rules
	MappingRules []*AuthOAuth2MappingRule `json:"mappingRules"`

	// name
	Name string `json:"name,omitempty"`

	// sites
	Sites []string `json:"sites"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth o auth2 connector config
func (m *AuthOAuth2ConnectorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigbitbucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiggithub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiggitlab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigldap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiglinkedin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigmicrosoft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigoauth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigoidc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigpydio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigsaml(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappingRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigbitbucket(formats strfmt.Registry) error {
	if swag.IsZero(m.Configbitbucket) { // not required
		return nil
	}

	if m.Configbitbucket != nil {
		if err := m.Configbitbucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configbitbucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configbitbucket")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfiggithub(formats strfmt.Registry) error {
	if swag.IsZero(m.Configgithub) { // not required
		return nil
	}

	if m.Configgithub != nil {
		if err := m.Configgithub.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configgithub")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configgithub")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfiggitlab(formats strfmt.Registry) error {
	if swag.IsZero(m.Configgitlab) { // not required
		return nil
	}

	if m.Configgitlab != nil {
		if err := m.Configgitlab.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configgitlab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configgitlab")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigldap(formats strfmt.Registry) error {
	if swag.IsZero(m.Configldap) { // not required
		return nil
	}

	if m.Configldap != nil {
		if err := m.Configldap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configldap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configldap")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfiglinkedin(formats strfmt.Registry) error {
	if swag.IsZero(m.Configlinkedin) { // not required
		return nil
	}

	if m.Configlinkedin != nil {
		if err := m.Configlinkedin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configlinkedin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configlinkedin")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigmicrosoft(formats strfmt.Registry) error {
	if swag.IsZero(m.Configmicrosoft) { // not required
		return nil
	}

	if m.Configmicrosoft != nil {
		if err := m.Configmicrosoft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configmicrosoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configmicrosoft")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigoauth(formats strfmt.Registry) error {
	if swag.IsZero(m.Configoauth) { // not required
		return nil
	}

	if m.Configoauth != nil {
		if err := m.Configoauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configoauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configoauth")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigoidc(formats strfmt.Registry) error {
	if swag.IsZero(m.Configoidc) { // not required
		return nil
	}

	if m.Configoidc != nil {
		if err := m.Configoidc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configoidc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configoidc")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigpydio(formats strfmt.Registry) error {
	if swag.IsZero(m.Configpydio) { // not required
		return nil
	}

	if m.Configpydio != nil {
		if err := m.Configpydio.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configpydio")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configpydio")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateConfigsaml(formats strfmt.Registry) error {
	if swag.IsZero(m.Configsaml) { // not required
		return nil
	}

	if m.Configsaml != nil {
		if err := m.Configsaml.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configsaml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configsaml")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) validateMappingRules(formats strfmt.Registry) error {
	if swag.IsZero(m.MappingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.MappingRules); i++ {
		if swag.IsZero(m.MappingRules[i]) { // not required
			continue
		}

		if m.MappingRules[i] != nil {
			if err := m.MappingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappingRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this auth o auth2 connector config based on the context it is used
func (m *AuthOAuth2ConnectorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigbitbucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiggithub(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiggitlab(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigldap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiglinkedin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigmicrosoft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigoauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigoidc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigpydio(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigsaml(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMappingRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigbitbucket(ctx context.Context, formats strfmt.Registry) error {

	if m.Configbitbucket != nil {

		if swag.IsZero(m.Configbitbucket) { // not required
			return nil
		}

		if err := m.Configbitbucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configbitbucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configbitbucket")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfiggithub(ctx context.Context, formats strfmt.Registry) error {

	if m.Configgithub != nil {

		if swag.IsZero(m.Configgithub) { // not required
			return nil
		}

		if err := m.Configgithub.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configgithub")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configgithub")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfiggitlab(ctx context.Context, formats strfmt.Registry) error {

	if m.Configgitlab != nil {

		if swag.IsZero(m.Configgitlab) { // not required
			return nil
		}

		if err := m.Configgitlab.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configgitlab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configgitlab")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigldap(ctx context.Context, formats strfmt.Registry) error {

	if m.Configldap != nil {

		if swag.IsZero(m.Configldap) { // not required
			return nil
		}

		if err := m.Configldap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configldap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configldap")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfiglinkedin(ctx context.Context, formats strfmt.Registry) error {

	if m.Configlinkedin != nil {

		if swag.IsZero(m.Configlinkedin) { // not required
			return nil
		}

		if err := m.Configlinkedin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configlinkedin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configlinkedin")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigmicrosoft(ctx context.Context, formats strfmt.Registry) error {

	if m.Configmicrosoft != nil {

		if swag.IsZero(m.Configmicrosoft) { // not required
			return nil
		}

		if err := m.Configmicrosoft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configmicrosoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configmicrosoft")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigoauth(ctx context.Context, formats strfmt.Registry) error {

	if m.Configoauth != nil {

		if swag.IsZero(m.Configoauth) { // not required
			return nil
		}

		if err := m.Configoauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configoauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configoauth")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigoidc(ctx context.Context, formats strfmt.Registry) error {

	if m.Configoidc != nil {

		if swag.IsZero(m.Configoidc) { // not required
			return nil
		}

		if err := m.Configoidc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configoidc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configoidc")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigpydio(ctx context.Context, formats strfmt.Registry) error {

	if m.Configpydio != nil {

		if swag.IsZero(m.Configpydio) { // not required
			return nil
		}

		if err := m.Configpydio.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configpydio")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configpydio")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateConfigsaml(ctx context.Context, formats strfmt.Registry) error {

	if m.Configsaml != nil {

		if swag.IsZero(m.Configsaml) { // not required
			return nil
		}

		if err := m.Configsaml.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configsaml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configsaml")
			}
			return err
		}
	}

	return nil
}

func (m *AuthOAuth2ConnectorConfig) contextValidateMappingRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MappingRules); i++ {

		if m.MappingRules[i] != nil {

			if swag.IsZero(m.MappingRules[i]) { // not required
				return nil
			}

			if err := m.MappingRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappingRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthOAuth2ConnectorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthOAuth2ConnectorConfig) UnmarshalBinary(b []byte) error {
	var res AuthOAuth2ConnectorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
