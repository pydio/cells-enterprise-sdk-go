// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReportsAuditedWorkspace reports audited workspace
//
// swagger:model reportsAuditedWorkspace
type ReportsAuditedWorkspace struct {

	// broken link
	BrokenLink bool `json:"BrokenLink,omitempty"`

	// owner user
	OwnerUser *IdmUser `json:"OwnerUser,omitempty"`

	// roles read
	RolesRead []*IdmRole `json:"RolesRead"`

	// roles write
	RolesWrite []*IdmRole `json:"RolesWrite"`

	// users read count
	UsersReadCount int32 `json:"UsersReadCount,omitempty"`

	// users write count
	UsersWriteCount int32 `json:"UsersWriteCount,omitempty"`

	// workspace
	Workspace *IdmWorkspace `json:"Workspace,omitempty"`
}

// Validate validates this reports audited workspace
func (m *ReportsAuditedWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesWrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportsAuditedWorkspace) validateOwnerUser(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerUser) { // not required
		return nil
	}

	if m.OwnerUser != nil {
		if err := m.OwnerUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OwnerUser")
			}
			return err
		}
	}

	return nil
}

func (m *ReportsAuditedWorkspace) validateRolesRead(formats strfmt.Registry) error {
	if swag.IsZero(m.RolesRead) { // not required
		return nil
	}

	for i := 0; i < len(m.RolesRead); i++ {
		if swag.IsZero(m.RolesRead[i]) { // not required
			continue
		}

		if m.RolesRead[i] != nil {
			if err := m.RolesRead[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RolesRead" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportsAuditedWorkspace) validateRolesWrite(formats strfmt.Registry) error {
	if swag.IsZero(m.RolesWrite) { // not required
		return nil
	}

	for i := 0; i < len(m.RolesWrite); i++ {
		if swag.IsZero(m.RolesWrite[i]) { // not required
			continue
		}

		if m.RolesWrite[i] != nil {
			if err := m.RolesWrite[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RolesWrite" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportsAuditedWorkspace) validateWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reports audited workspace based on the context it is used
func (m *ReportsAuditedWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwnerUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRolesRead(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRolesWrite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportsAuditedWorkspace) contextValidateOwnerUser(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerUser != nil {
		if err := m.OwnerUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OwnerUser")
			}
			return err
		}
	}

	return nil
}

func (m *ReportsAuditedWorkspace) contextValidateRolesRead(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RolesRead); i++ {

		if m.RolesRead[i] != nil {
			if err := m.RolesRead[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RolesRead" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportsAuditedWorkspace) contextValidateRolesWrite(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RolesWrite); i++ {

		if m.RolesWrite[i] != nil {
			if err := m.RolesWrite[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RolesWrite" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportsAuditedWorkspace) contextValidateWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspace != nil {
		if err := m.Workspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportsAuditedWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportsAuditedWorkspace) UnmarshalBinary(b []byte) error {
	var res ReportsAuditedWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
