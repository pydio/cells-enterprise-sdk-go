// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReportsSharedResourceShareType reports shared resource share type
//
// swagger:model reportsSharedResourceShareType
type ReportsSharedResourceShareType string

func NewReportsSharedResourceShareType(value ReportsSharedResourceShareType) *ReportsSharedResourceShareType {
	v := value
	return &v
}

const (

	// ReportsSharedResourceShareTypeANY captures enum value "ANY"
	ReportsSharedResourceShareTypeANY ReportsSharedResourceShareType = "ANY"

	// ReportsSharedResourceShareTypeWORKSPACE captures enum value "WORKSPACE"
	ReportsSharedResourceShareTypeWORKSPACE ReportsSharedResourceShareType = "WORKSPACE"

	// ReportsSharedResourceShareTypeCELL captures enum value "CELL"
	ReportsSharedResourceShareTypeCELL ReportsSharedResourceShareType = "CELL"

	// ReportsSharedResourceShareTypeLINK captures enum value "LINK"
	ReportsSharedResourceShareTypeLINK ReportsSharedResourceShareType = "LINK"
)

// for schema
var reportsSharedResourceShareTypeEnum []interface{}

func init() {
	var res []ReportsSharedResourceShareType
	if err := json.Unmarshal([]byte(`["ANY","WORKSPACE","CELL","LINK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportsSharedResourceShareTypeEnum = append(reportsSharedResourceShareTypeEnum, v)
	}
}

func (m ReportsSharedResourceShareType) validateReportsSharedResourceShareTypeEnum(path, location string, value ReportsSharedResourceShareType) error {
	if err := validate.EnumCase(path, location, value, reportsSharedResourceShareTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this reports shared resource share type
func (m ReportsSharedResourceShareType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReportsSharedResourceShareTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this reports shared resource share type based on context it is used
func (m ReportsSharedResourceShareType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
