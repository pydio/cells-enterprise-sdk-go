// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntSelectorTemplate ent selector template
//
// swagger:model entSelectorTemplate
type EntSelectorTemplate struct {

	// action output filter
	ActionOutputFilter *JobsActionOutputFilter `json:"ActionOutputFilter,omitempty"`

	// as filter
	AsFilter bool `json:"AsFilter,omitempty"`

	// context meta filter
	ContextMetaFilter *JobsContextMetaFilter `json:"ContextMetaFilter,omitempty"`

	// data source selector
	DataSourceSelector *JobsDataSourceSelector `json:"DataSourceSelector,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// idm selector
	IdmSelector *JobsIdmSelector `json:"IdmSelector,omitempty"`

	// label
	Label string `json:"Label,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// nodes selector
	NodesSelector *JobsNodesSelector `json:"NodesSelector,omitempty"`

	// trigger filter
	TriggerFilter *JobsTriggerFilter `json:"TriggerFilter,omitempty"`
}

// Validate validates this ent selector template
func (m *EntSelectorTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionOutputFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContextMetaFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSourceSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdmSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodesSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntSelectorTemplate) validateActionOutputFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionOutputFilter) { // not required
		return nil
	}

	if m.ActionOutputFilter != nil {
		if err := m.ActionOutputFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionOutputFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ActionOutputFilter")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) validateContextMetaFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ContextMetaFilter) { // not required
		return nil
	}

	if m.ContextMetaFilter != nil {
		if err := m.ContextMetaFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContextMetaFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContextMetaFilter")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) validateDataSourceSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.DataSourceSelector) { // not required
		return nil
	}

	if m.DataSourceSelector != nil {
		if err := m.DataSourceSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DataSourceSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DataSourceSelector")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) validateIdmSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.IdmSelector) { // not required
		return nil
	}

	if m.IdmSelector != nil {
		if err := m.IdmSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IdmSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IdmSelector")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) validateNodesSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.NodesSelector) { // not required
		return nil
	}

	if m.NodesSelector != nil {
		if err := m.NodesSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodesSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NodesSelector")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) validateTriggerFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerFilter) { // not required
		return nil
	}

	if m.TriggerFilter != nil {
		if err := m.TriggerFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TriggerFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TriggerFilter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ent selector template based on the context it is used
func (m *EntSelectorTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionOutputFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContextMetaFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataSourceSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdmSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodesSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntSelectorTemplate) contextValidateActionOutputFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ActionOutputFilter != nil {
		if err := m.ActionOutputFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionOutputFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ActionOutputFilter")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) contextValidateContextMetaFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ContextMetaFilter != nil {
		if err := m.ContextMetaFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContextMetaFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContextMetaFilter")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) contextValidateDataSourceSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.DataSourceSelector != nil {
		if err := m.DataSourceSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DataSourceSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DataSourceSelector")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) contextValidateIdmSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.IdmSelector != nil {
		if err := m.IdmSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IdmSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IdmSelector")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) contextValidateNodesSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.NodesSelector != nil {
		if err := m.NodesSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodesSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NodesSelector")
			}
			return err
		}
	}

	return nil
}

func (m *EntSelectorTemplate) contextValidateTriggerFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggerFilter != nil {
		if err := m.TriggerFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TriggerFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TriggerFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntSelectorTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntSelectorTemplate) UnmarshalBinary(b []byte) error {
	var res EntSelectorTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
