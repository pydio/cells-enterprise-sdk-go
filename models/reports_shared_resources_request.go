// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReportsSharedResourcesRequest reports shared resources request
//
// swagger:model reportsSharedResourcesRequest
type ReportsSharedResourcesRequest struct {

	// last updated before
	LastUpdatedBefore int32 `json:"LastUpdatedBefore,omitempty"`

	// last updated since
	LastUpdatedSince int32 `json:"LastUpdatedSince,omitempty"`

	// limit
	Limit int32 `json:"Limit,omitempty"`

	// node size min
	NodeSizeMin int32 `json:"NodeSizeMin,omitempty"`

	// node type
	NodeType *TreeNodeType `json:"NodeType,omitempty"`

	// Listing options
	Offset int32 `json:"Offset,omitempty"`

	// owner UUID
	OwnerUUID string `json:"OwnerUUID,omitempty"`

	// report date
	ReportDate int32 `json:"ReportDate,omitempty"`

	// roles read a n d
	RolesReadAND bool `json:"RolesReadAND,omitempty"`

	// roles read u UI ds
	RolesReadUUIDs []string `json:"RolesReadUUIDs"`

	// Filter by root path
	RootPath string `json:"RootPath,omitempty"`

	// share type
	ShareType *ReportsSharedResourceShareType `json:"ShareType,omitempty"`

	// users read count max
	UsersReadCountMax int32 `json:"UsersReadCountMax,omitempty"`

	// users read count min
	UsersReadCountMin int32 `json:"UsersReadCountMin,omitempty"`
}

// Validate validates this reports shared resources request
func (m *ReportsSharedResourcesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportsSharedResourcesRequest) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeType) { // not required
		return nil
	}

	if m.NodeType != nil {
		if err := m.NodeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NodeType")
			}
			return err
		}
	}

	return nil
}

func (m *ReportsSharedResourcesRequest) validateShareType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareType) { // not required
		return nil
	}

	if m.ShareType != nil {
		if err := m.ShareType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShareType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShareType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reports shared resources request based on the context it is used
func (m *ReportsSharedResourcesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShareType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportsSharedResourcesRequest) contextValidateNodeType(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeType != nil {
		if err := m.NodeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NodeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NodeType")
			}
			return err
		}
	}

	return nil
}

func (m *ReportsSharedResourcesRequest) contextValidateShareType(ctx context.Context, formats strfmt.Registry) error {

	if m.ShareType != nil {
		if err := m.ShareType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShareType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShareType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportsSharedResourcesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportsSharedResourcesRequest) UnmarshalBinary(b []byte) error {
	var res ReportsSharedResourcesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
