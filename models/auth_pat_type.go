// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthPatType auth pat type
//
// swagger:model authPatType
type AuthPatType string

func NewAuthPatType(value AuthPatType) *AuthPatType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthPatType.
func (m AuthPatType) Pointer() *AuthPatType {
	return &m
}

const (

	// AuthPatTypeANY captures enum value "ANY"
	AuthPatTypeANY AuthPatType = "ANY"

	// AuthPatTypePERSONAL captures enum value "PERSONAL"
	AuthPatTypePERSONAL AuthPatType = "PERSONAL"

	// AuthPatTypeDOCUMENT captures enum value "DOCUMENT"
	AuthPatTypeDOCUMENT AuthPatType = "DOCUMENT"
)

// for schema
var authPatTypeEnum []interface{}

func init() {
	var res []AuthPatType
	if err := json.Unmarshal([]byte(`["ANY","PERSONAL","DOCUMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authPatTypeEnum = append(authPatTypeEnum, v)
	}
}

func (m AuthPatType) validateAuthPatTypeEnum(path, location string, value AuthPatType) error {
	if err := validate.EnumCase(path, location, value, authPatTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth pat type
func (m AuthPatType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthPatTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth pat type based on context it is used
func (m AuthPatType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
