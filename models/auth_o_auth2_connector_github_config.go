// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthOAuth2ConnectorGithubConfig auth o auth2 connector github config
//
// swagger:model authOAuth2ConnectorGithubConfig
type AuthOAuth2ConnectorGithubConfig struct {

	// client ID
	ClientID string `json:"clientID,omitempty"`

	// client secret
	ClientSecret string `json:"clientSecret,omitempty"`

	// For GitHub enterprise
	HostName string `json:"hostName,omitempty"`

	// load all groups
	LoadAllGroups bool `json:"loadAllGroups,omitempty"`

	// orgs
	Orgs []*AuthOAuth2ConnectorGithubConfigOrg `json:"orgs"`

	// redirect URI
	RedirectURI string `json:"redirectURI,omitempty"`

	// root c a
	RootCA string `json:"rootCA,omitempty"`

	// team name field
	TeamNameField string `json:"teamNameField,omitempty"`

	// use login as ID
	UseLoginAsID bool `json:"useLoginAsID,omitempty"`
}

// Validate validates this auth o auth2 connector github config
func (m *AuthOAuth2ConnectorGithubConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrgs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthOAuth2ConnectorGithubConfig) validateOrgs(formats strfmt.Registry) error {
	if swag.IsZero(m.Orgs) { // not required
		return nil
	}

	for i := 0; i < len(m.Orgs); i++ {
		if swag.IsZero(m.Orgs[i]) { // not required
			continue
		}

		if m.Orgs[i] != nil {
			if err := m.Orgs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orgs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orgs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this auth o auth2 connector github config based on the context it is used
func (m *AuthOAuth2ConnectorGithubConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthOAuth2ConnectorGithubConfig) contextValidateOrgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Orgs); i++ {

		if m.Orgs[i] != nil {

			if swag.IsZero(m.Orgs[i]) { // not required
				return nil
			}

			if err := m.Orgs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orgs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orgs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthOAuth2ConnectorGithubConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthOAuth2ConnectorGithubConfig) UnmarshalBinary(b []byte) error {
	var res AuthOAuth2ConnectorGithubConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
