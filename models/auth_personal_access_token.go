// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthPersonalAccessToken auth personal access token
//
// swagger:model authPersonalAccessToken
type AuthPersonalAccessToken struct {

	// auto refresh window
	AutoRefreshWindow int32 `json:"AutoRefreshWindow,omitempty"`

	// created at
	CreatedAt string `json:"CreatedAt,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// expires at
	ExpiresAt string `json:"ExpiresAt,omitempty"`

	// label
	Label string `json:"Label,omitempty"`

	// scopes
	Scopes []string `json:"Scopes"`

	// type
	Type *AuthPatType `json:"Type,omitempty"`

	// updated at
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// user login
	UserLogin string `json:"UserLogin,omitempty"`

	// user Uuid
	UserUUID string `json:"UserUuid,omitempty"`

	// Uuid
	UUID string `json:"Uuid,omitempty"`
}

// Validate validates this auth personal access token
func (m *AuthPersonalAccessToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthPersonalAccessToken) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auth personal access token based on the context it is used
func (m *AuthPersonalAccessToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthPersonalAccessToken) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthPersonalAccessToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthPersonalAccessToken) UnmarshalBinary(b []byte) error {
	var res AuthPersonalAccessToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
