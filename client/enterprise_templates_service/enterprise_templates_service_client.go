// Code generated by go-swagger; DO NOT EDIT.

package enterprise_templates_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new enterprise templates service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new enterprise templates service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new enterprise templates service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for enterprise templates service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNodeTemplate(params *CreateNodeTemplateParams, opts ...ClientOption) (*CreateNodeTemplateOK, error)

	DeleteMetaTemplate(params *DeleteMetaTemplateParams, opts ...ClientOption) (*DeleteMetaTemplateOK, error)

	DeleteNodeTemplate(params *DeleteNodeTemplateParams, opts ...ClientOption) (*DeleteNodeTemplateOK, error)

	ListMetaTemplates(params *ListMetaTemplatesParams, opts ...ClientOption) (*ListMetaTemplatesOK, error)

	PutMetaTemplate(params *PutMetaTemplateParams, opts ...ClientOption) (*PutMetaTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNodeTemplate creates a template from a specific node
*/
func (a *Client) CreateNodeTemplate(params *CreateNodeTemplateParams, opts ...ClientOption) (*CreateNodeTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodeTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNodeTemplate",
		Method:             "POST",
		PathPattern:        "/templates/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &CreateNodeTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNodeTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNodeTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMetaTemplate deletes an arbitrary metadata template
*/
func (a *Client) DeleteMetaTemplate(params *DeleteMetaTemplateParams, opts ...ClientOption) (*DeleteMetaTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMetaTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMetaTemplate",
		Method:             "DELETE",
		PathPattern:        "/templates/meta/{TemplateUuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteMetaTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMetaTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMetaTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNodeTemplate creates a template from a specific node
*/
func (a *Client) DeleteNodeTemplate(params *DeleteNodeTemplateParams, opts ...ClientOption) (*DeleteNodeTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNodeTemplate",
		Method:             "DELETE",
		PathPattern:        "/templates/node/{TemplateUuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteNodeTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNodeTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNodeTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMetaTemplates stores an arbitrary metadata template
*/
func (a *Client) ListMetaTemplates(params *ListMetaTemplatesParams, opts ...ClientOption) (*ListMetaTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMetaTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMetaTemplates",
		Method:             "GET",
		PathPattern:        "/templates/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListMetaTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMetaTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMetaTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutMetaTemplate stores an arbitrary metadata template
*/
func (a *Client) PutMetaTemplate(params *PutMetaTemplateParams, opts ...ClientOption) (*PutMetaTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMetaTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutMetaTemplate",
		Method:             "PUT",
		PathPattern:        "/templates/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutMetaTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutMetaTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutMetaTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
