// Code generated by go-swagger; DO NOT EDIT.

package license_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// PutLicenseInfoReader is a Reader for the PutLicenseInfo structure.
type PutLicenseInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutLicenseInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutLicenseInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutLicenseInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutLicenseInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutLicenseInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutLicenseInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutLicenseInfoOK creates a PutLicenseInfoOK with default headers values
func NewPutLicenseInfoOK() *PutLicenseInfoOK {
	return &PutLicenseInfoOK{}
}

/* PutLicenseInfoOK describes a response with status code 200, with default header values.

PutLicenseInfoOK put license info o k
*/
type PutLicenseInfoOK struct {
	Payload *models.CertPutLicenseInfoResponse
}

func (o *PutLicenseInfoOK) Error() string {
	return fmt.Sprintf("[PUT /license/update][%d] putLicenseInfoOK  %+v", 200, o.Payload)
}
func (o *PutLicenseInfoOK) GetPayload() *models.CertPutLicenseInfoResponse {
	return o.Payload
}

func (o *PutLicenseInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertPutLicenseInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLicenseInfoUnauthorized creates a PutLicenseInfoUnauthorized with default headers values
func NewPutLicenseInfoUnauthorized() *PutLicenseInfoUnauthorized {
	return &PutLicenseInfoUnauthorized{}
}

/* PutLicenseInfoUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutLicenseInfoUnauthorized struct {
}

func (o *PutLicenseInfoUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /license/update][%d] putLicenseInfoUnauthorized ", 401)
}

func (o *PutLicenseInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLicenseInfoForbidden creates a PutLicenseInfoForbidden with default headers values
func NewPutLicenseInfoForbidden() *PutLicenseInfoForbidden {
	return &PutLicenseInfoForbidden{}
}

/* PutLicenseInfoForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutLicenseInfoForbidden struct {
	Payload *models.RestError
}

func (o *PutLicenseInfoForbidden) Error() string {
	return fmt.Sprintf("[PUT /license/update][%d] putLicenseInfoForbidden  %+v", 403, o.Payload)
}
func (o *PutLicenseInfoForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutLicenseInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLicenseInfoNotFound creates a PutLicenseInfoNotFound with default headers values
func NewPutLicenseInfoNotFound() *PutLicenseInfoNotFound {
	return &PutLicenseInfoNotFound{}
}

/* PutLicenseInfoNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutLicenseInfoNotFound struct {
	Payload *models.RestError
}

func (o *PutLicenseInfoNotFound) Error() string {
	return fmt.Sprintf("[PUT /license/update][%d] putLicenseInfoNotFound  %+v", 404, o.Payload)
}
func (o *PutLicenseInfoNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutLicenseInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLicenseInfoInternalServerError creates a PutLicenseInfoInternalServerError with default headers values
func NewPutLicenseInfoInternalServerError() *PutLicenseInfoInternalServerError {
	return &PutLicenseInfoInternalServerError{}
}

/* PutLicenseInfoInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutLicenseInfoInternalServerError struct {
	Payload *models.RestError
}

func (o *PutLicenseInfoInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /license/update][%d] putLicenseInfoInternalServerError  %+v", 500, o.Payload)
}
func (o *PutLicenseInfoInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutLicenseInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
