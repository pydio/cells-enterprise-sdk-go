// Code generated by go-swagger; DO NOT EDIT.

package scheduler_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scheduler service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scheduler service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteActionTemplate(params *DeleteActionTemplateParams, opts ...ClientOption) (*DeleteActionTemplateOK, error)

	DeleteJob(params *DeleteJobParams, opts ...ClientOption) (*DeleteJobOK, error)

	DeleteJobTemplate(params *DeleteJobTemplateParams, opts ...ClientOption) (*DeleteJobTemplateOK, error)

	DeleteSelectorTemplate(params *DeleteSelectorTemplateParams, opts ...ClientOption) (*DeleteSelectorTemplateOK, error)

	ExecutePlaygroundCode(params *ExecutePlaygroundCodeParams, opts ...ClientOption) (*ExecutePlaygroundCodeOK, error)

	ListActionTemplates(params *ListActionTemplatesParams, opts ...ClientOption) (*ListActionTemplatesOK, error)

	ListDocTemplates(params *ListDocTemplatesParams, opts ...ClientOption) (*ListDocTemplatesOK, error)

	ListJobTemplates(params *ListJobTemplatesParams, opts ...ClientOption) (*ListJobTemplatesOK, error)

	ListSelectorTemplates(params *ListSelectorTemplatesParams, opts ...ClientOption) (*ListSelectorTemplatesOK, error)

	PutActionTemplate(params *PutActionTemplateParams, opts ...ClientOption) (*PutActionTemplateOK, error)

	PutJob(params *PutJobParams, opts ...ClientOption) (*PutJobOK, error)

	PutJobTemplate(params *PutJobTemplateParams, opts ...ClientOption) (*PutJobTemplateOK, error)

	PutSelectorTemplate(params *PutSelectorTemplateParams, opts ...ClientOption) (*PutSelectorTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteActionTemplate templates management for actions
*/
func (a *Client) DeleteActionTemplate(params *DeleteActionTemplateParams, opts ...ClientOption) (*DeleteActionTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActionTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteActionTemplate",
		Method:             "DELETE",
		PathPattern:        "/scheduler/templates/actions/{TemplateName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteActionTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteActionTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteActionTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteJob enterprises only delete a job from the scheduler
*/
func (a *Client) DeleteJob(params *DeleteJobParams, opts ...ClientOption) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteJob",
		Method:             "DELETE",
		PathPattern:        "/scheduler/jobs/{JobID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteJobTemplate templates management for jobs
*/
func (a *Client) DeleteJobTemplate(params *DeleteJobTemplateParams, opts ...ClientOption) (*DeleteJobTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteJobTemplate",
		Method:             "DELETE",
		PathPattern:        "/scheduler/templates/jobs/{Name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteJobTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJobTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSelectorTemplate templates management for filters
*/
func (a *Client) DeleteSelectorTemplate(params *DeleteSelectorTemplateParams, opts ...ClientOption) (*DeleteSelectorTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSelectorTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSelectorTemplate",
		Method:             "DELETE",
		PathPattern:        "/scheduler/templates/selectors/{TemplateName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteSelectorTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSelectorTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSelectorTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecutePlaygroundCode runs a code sample
*/
func (a *Client) ExecutePlaygroundCode(params *ExecutePlaygroundCodeParams, opts ...ClientOption) (*ExecutePlaygroundCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutePlaygroundCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecutePlaygroundCode",
		Method:             "POST",
		PathPattern:        "/scheduler/templates/playground",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ExecutePlaygroundCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutePlaygroundCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecutePlaygroundCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListActionTemplates templates management for actions
*/
func (a *Client) ListActionTemplates(params *ListActionTemplatesParams, opts ...ClientOption) (*ListActionTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListActionTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListActionTemplates",
		Method:             "POST",
		PathPattern:        "/scheduler/templates/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListActionTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListActionTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListActionTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDocTemplates list doc templates API
*/
func (a *Client) ListDocTemplates(params *ListDocTemplatesParams, opts ...ClientOption) (*ListDocTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDocTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDocTemplates",
		Method:             "GET",
		PathPattern:        "/scheduler/templates/docs/{Type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListDocTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDocTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListDocTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListJobTemplates templates management for jobs
*/
func (a *Client) ListJobTemplates(params *ListJobTemplatesParams, opts ...ClientOption) (*ListJobTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListJobTemplates",
		Method:             "POST",
		PathPattern:        "/scheduler/templates/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListJobTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListJobTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSelectorTemplates templates management for filters
*/
func (a *Client) ListSelectorTemplates(params *ListSelectorTemplatesParams, opts ...ClientOption) (*ListSelectorTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSelectorTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSelectorTemplates",
		Method:             "POST",
		PathPattern:        "/scheduler/templates/selectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListSelectorTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSelectorTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSelectorTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutActionTemplate templates management for actions
*/
func (a *Client) PutActionTemplate(params *PutActionTemplateParams, opts ...ClientOption) (*PutActionTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutActionTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutActionTemplate",
		Method:             "PUT",
		PathPattern:        "/scheduler/templates/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutActionTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutActionTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutActionTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutJob enterprises only put a job in the scheduler
*/
func (a *Client) PutJob(params *PutJobParams, opts ...ClientOption) (*PutJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutJob",
		Method:             "PUT",
		PathPattern:        "/scheduler/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutJobTemplate templates management for jobs
*/
func (a *Client) PutJobTemplate(params *PutJobTemplateParams, opts ...ClientOption) (*PutJobTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutJobTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutJobTemplate",
		Method:             "PUT",
		PathPattern:        "/scheduler/templates/jobs/{Name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutJobTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutJobTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutJobTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSelectorTemplate templates management for filters
*/
func (a *Client) PutSelectorTemplate(params *PutSelectorTemplateParams, opts ...ClientOption) (*PutSelectorTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSelectorTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSelectorTemplate",
		Method:             "PUT",
		PathPattern:        "/scheduler/templates/selectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutSelectorTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSelectorTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSelectorTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
