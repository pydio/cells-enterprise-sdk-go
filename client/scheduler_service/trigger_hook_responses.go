// Code generated by go-swagger; DO NOT EDIT.

package scheduler_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// TriggerHookReader is a Reader for the TriggerHook structure.
type TriggerHookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggerHookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTriggerHookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTriggerHookDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTriggerHookOK creates a TriggerHookOK with default headers values
func NewTriggerHookOK() *TriggerHookOK {
	return &TriggerHookOK{}
}

/*
TriggerHookOK describes a response with status code 200, with default header values.

A successful response.
*/
type TriggerHookOK struct {
	Payload *models.EntJobHookResponse
}

// IsSuccess returns true when this trigger hook o k response has a 2xx status code
func (o *TriggerHookOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this trigger hook o k response has a 3xx status code
func (o *TriggerHookOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this trigger hook o k response has a 4xx status code
func (o *TriggerHookOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this trigger hook o k response has a 5xx status code
func (o *TriggerHookOK) IsServerError() bool {
	return false
}

// IsCode returns true when this trigger hook o k response a status code equal to that given
func (o *TriggerHookOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the trigger hook o k response
func (o *TriggerHookOK) Code() int {
	return 200
}

func (o *TriggerHookOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scheduler/hooks/{HookSlug}][%d] triggerHookOK %s", 200, payload)
}

func (o *TriggerHookOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scheduler/hooks/{HookSlug}][%d] triggerHookOK %s", 200, payload)
}

func (o *TriggerHookOK) GetPayload() *models.EntJobHookResponse {
	return o.Payload
}

func (o *TriggerHookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EntJobHookResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerHookDefault creates a TriggerHookDefault with default headers values
func NewTriggerHookDefault(code int) *TriggerHookDefault {
	return &TriggerHookDefault{
		_statusCode: code,
	}
}

/*
TriggerHookDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type TriggerHookDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this trigger hook default response has a 2xx status code
func (o *TriggerHookDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this trigger hook default response has a 3xx status code
func (o *TriggerHookDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this trigger hook default response has a 4xx status code
func (o *TriggerHookDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this trigger hook default response has a 5xx status code
func (o *TriggerHookDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this trigger hook default response a status code equal to that given
func (o *TriggerHookDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the trigger hook default response
func (o *TriggerHookDefault) Code() int {
	return o._statusCode
}

func (o *TriggerHookDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scheduler/hooks/{HookSlug}][%d] TriggerHook default %s", o._statusCode, payload)
}

func (o *TriggerHookDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scheduler/hooks/{HookSlug}][%d] TriggerHook default %s", o._statusCode, payload)
}

func (o *TriggerHookDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *TriggerHookDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
TriggerHookBody trigger hook body
swagger:model TriggerHookBody
*/
type TriggerHookBody struct {

	// job parameters
	JobParameters map[string]string `json:"JobParameters,omitempty"`

	// paths
	Paths []string `json:"Paths"`

	// task ID
	TaskID string `json:"TaskID,omitempty"`
}

// Validate validates this trigger hook body
func (o *TriggerHookBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this trigger hook body based on context it is used
func (o *TriggerHookBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TriggerHookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TriggerHookBody) UnmarshalBinary(b []byte) error {
	var res TriggerHookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
