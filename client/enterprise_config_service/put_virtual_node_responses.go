// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// PutVirtualNodeReader is a Reader for the PutVirtualNode structure.
type PutVirtualNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVirtualNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutVirtualNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutVirtualNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutVirtualNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutVirtualNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutVirtualNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutVirtualNodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutVirtualNodeOK creates a PutVirtualNodeOK with default headers values
func NewPutVirtualNodeOK() *PutVirtualNodeOK {
	return &PutVirtualNodeOK{}
}

/*
PutVirtualNodeOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutVirtualNodeOK struct {
	Payload *models.TreeNode
}

// IsSuccess returns true when this put virtual node o k response has a 2xx status code
func (o *PutVirtualNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put virtual node o k response has a 3xx status code
func (o *PutVirtualNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put virtual node o k response has a 4xx status code
func (o *PutVirtualNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put virtual node o k response has a 5xx status code
func (o *PutVirtualNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put virtual node o k response a status code equal to that given
func (o *PutVirtualNodeOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutVirtualNodeOK) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeOK  %+v", 200, o.Payload)
}

func (o *PutVirtualNodeOK) String() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeOK  %+v", 200, o.Payload)
}

func (o *PutVirtualNodeOK) GetPayload() *models.TreeNode {
	return o.Payload
}

func (o *PutVirtualNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeUnauthorized creates a PutVirtualNodeUnauthorized with default headers values
func NewPutVirtualNodeUnauthorized() *PutVirtualNodeUnauthorized {
	return &PutVirtualNodeUnauthorized{}
}

/*
PutVirtualNodeUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutVirtualNodeUnauthorized struct {
}

// IsSuccess returns true when this put virtual node unauthorized response has a 2xx status code
func (o *PutVirtualNodeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put virtual node unauthorized response has a 3xx status code
func (o *PutVirtualNodeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put virtual node unauthorized response has a 4xx status code
func (o *PutVirtualNodeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put virtual node unauthorized response has a 5xx status code
func (o *PutVirtualNodeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put virtual node unauthorized response a status code equal to that given
func (o *PutVirtualNodeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutVirtualNodeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeUnauthorized ", 401)
}

func (o *PutVirtualNodeUnauthorized) String() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeUnauthorized ", 401)
}

func (o *PutVirtualNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutVirtualNodeForbidden creates a PutVirtualNodeForbidden with default headers values
func NewPutVirtualNodeForbidden() *PutVirtualNodeForbidden {
	return &PutVirtualNodeForbidden{}
}

/*
PutVirtualNodeForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutVirtualNodeForbidden struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put virtual node forbidden response has a 2xx status code
func (o *PutVirtualNodeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put virtual node forbidden response has a 3xx status code
func (o *PutVirtualNodeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put virtual node forbidden response has a 4xx status code
func (o *PutVirtualNodeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put virtual node forbidden response has a 5xx status code
func (o *PutVirtualNodeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put virtual node forbidden response a status code equal to that given
func (o *PutVirtualNodeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutVirtualNodeForbidden) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeForbidden  %+v", 403, o.Payload)
}

func (o *PutVirtualNodeForbidden) String() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeForbidden  %+v", 403, o.Payload)
}

func (o *PutVirtualNodeForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVirtualNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeNotFound creates a PutVirtualNodeNotFound with default headers values
func NewPutVirtualNodeNotFound() *PutVirtualNodeNotFound {
	return &PutVirtualNodeNotFound{}
}

/*
PutVirtualNodeNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutVirtualNodeNotFound struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put virtual node not found response has a 2xx status code
func (o *PutVirtualNodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put virtual node not found response has a 3xx status code
func (o *PutVirtualNodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put virtual node not found response has a 4xx status code
func (o *PutVirtualNodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put virtual node not found response has a 5xx status code
func (o *PutVirtualNodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put virtual node not found response a status code equal to that given
func (o *PutVirtualNodeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutVirtualNodeNotFound) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeNotFound  %+v", 404, o.Payload)
}

func (o *PutVirtualNodeNotFound) String() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeNotFound  %+v", 404, o.Payload)
}

func (o *PutVirtualNodeNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVirtualNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeInternalServerError creates a PutVirtualNodeInternalServerError with default headers values
func NewPutVirtualNodeInternalServerError() *PutVirtualNodeInternalServerError {
	return &PutVirtualNodeInternalServerError{}
}

/*
PutVirtualNodeInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutVirtualNodeInternalServerError struct {
	Payload *models.RestError
}

// IsSuccess returns true when this put virtual node internal server error response has a 2xx status code
func (o *PutVirtualNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put virtual node internal server error response has a 3xx status code
func (o *PutVirtualNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put virtual node internal server error response has a 4xx status code
func (o *PutVirtualNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put virtual node internal server error response has a 5xx status code
func (o *PutVirtualNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put virtual node internal server error response a status code equal to that given
func (o *PutVirtualNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutVirtualNodeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *PutVirtualNodeInternalServerError) String() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *PutVirtualNodeInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVirtualNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeDefault creates a PutVirtualNodeDefault with default headers values
func NewPutVirtualNodeDefault(code int) *PutVirtualNodeDefault {
	return &PutVirtualNodeDefault{
		_statusCode: code,
	}
}

/*
PutVirtualNodeDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PutVirtualNodeDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// Code gets the status code for the put virtual node default response
func (o *PutVirtualNodeDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this put virtual node default response has a 2xx status code
func (o *PutVirtualNodeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put virtual node default response has a 3xx status code
func (o *PutVirtualNodeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put virtual node default response has a 4xx status code
func (o *PutVirtualNodeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put virtual node default response has a 5xx status code
func (o *PutVirtualNodeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put virtual node default response a status code equal to that given
func (o *PutVirtualNodeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PutVirtualNodeDefault) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] PutVirtualNode default  %+v", o._statusCode, o.Payload)
}

func (o *PutVirtualNodeDefault) String() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] PutVirtualNode default  %+v", o._statusCode, o.Payload)
}

func (o *PutVirtualNodeDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *PutVirtualNodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutVirtualNodeBody put virtual node body
swagger:model PutVirtualNodeBody
*/
type PutVirtualNodeBody struct {

	// Can be used for output when node is appearing in multiple workspaces
	AppearsIn []*models.TreeWorkspaceRelativePath `json:"AppearsIn"`

	// List of successive commits
	Commits []*models.TreeChangeLog `json:"Commits"`

	// Hash of the content if node is a LEAF, Uuid or
	Etag string `json:"Etag,omitempty"`

	// Last modification Timestamp
	MTime string `json:"MTime,omitempty"`

	// ------------------------------------
	// Then a free K => V representation of any kind of metadata
	// ------------------------------------
	MetaStore map[string]string `json:"MetaStore,omitempty"`

	// Permission mode, like 0777
	Mode int32 `json:"Mode,omitempty"`

	// path
	Path string `json:"Path,omitempty"`

	// Size of the file, or cumulated size of folder
	Size string `json:"Size,omitempty"`

	// type
	Type *models.TreeNodeType `json:"Type,omitempty"`
}

// Validate validates this put virtual node body
func (o *PutVirtualNodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppearsIn(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommits(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutVirtualNodeBody) validateAppearsIn(formats strfmt.Registry) error {
	if swag.IsZero(o.AppearsIn) { // not required
		return nil
	}

	for i := 0; i < len(o.AppearsIn); i++ {
		if swag.IsZero(o.AppearsIn[i]) { // not required
			continue
		}

		if o.AppearsIn[i] != nil {
			if err := o.AppearsIn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "AppearsIn" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "AppearsIn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutVirtualNodeBody) validateCommits(formats strfmt.Registry) error {
	if swag.IsZero(o.Commits) { // not required
		return nil
	}

	for i := 0; i < len(o.Commits); i++ {
		if swag.IsZero(o.Commits[i]) { // not required
			continue
		}

		if o.Commits[i] != nil {
			if err := o.Commits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Commits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Commits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutVirtualNodeBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "Type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put virtual node body based on the context it is used
func (o *PutVirtualNodeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppearsIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCommits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutVirtualNodeBody) contextValidateAppearsIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AppearsIn); i++ {

		if o.AppearsIn[i] != nil {
			if err := o.AppearsIn[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "AppearsIn" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "AppearsIn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutVirtualNodeBody) contextValidateCommits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Commits); i++ {

		if o.Commits[i] != nil {
			if err := o.Commits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Commits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "Commits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PutVirtualNodeBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {
		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "Type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutVirtualNodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutVirtualNodeBody) UnmarshalBinary(b []byte) error {
	var res PutVirtualNodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
