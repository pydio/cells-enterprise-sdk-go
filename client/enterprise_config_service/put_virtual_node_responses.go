// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// PutVirtualNodeReader is a Reader for the PutVirtualNode structure.
type PutVirtualNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVirtualNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutVirtualNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutVirtualNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutVirtualNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutVirtualNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutVirtualNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutVirtualNodeOK creates a PutVirtualNodeOK with default headers values
func NewPutVirtualNodeOK() *PutVirtualNodeOK {
	return &PutVirtualNodeOK{}
}

/* PutVirtualNodeOK describes a response with status code 200, with default header values.

PutVirtualNodeOK put virtual node o k
*/
type PutVirtualNodeOK struct {
	Payload *models.TreeNode
}

func (o *PutVirtualNodeOK) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeOK  %+v", 200, o.Payload)
}
func (o *PutVirtualNodeOK) GetPayload() *models.TreeNode {
	return o.Payload
}

func (o *PutVirtualNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeUnauthorized creates a PutVirtualNodeUnauthorized with default headers values
func NewPutVirtualNodeUnauthorized() *PutVirtualNodeUnauthorized {
	return &PutVirtualNodeUnauthorized{}
}

/* PutVirtualNodeUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutVirtualNodeUnauthorized struct {
}

func (o *PutVirtualNodeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeUnauthorized ", 401)
}

func (o *PutVirtualNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutVirtualNodeForbidden creates a PutVirtualNodeForbidden with default headers values
func NewPutVirtualNodeForbidden() *PutVirtualNodeForbidden {
	return &PutVirtualNodeForbidden{}
}

/* PutVirtualNodeForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutVirtualNodeForbidden struct {
	Payload *models.RestError
}

func (o *PutVirtualNodeForbidden) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeForbidden  %+v", 403, o.Payload)
}
func (o *PutVirtualNodeForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVirtualNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeNotFound creates a PutVirtualNodeNotFound with default headers values
func NewPutVirtualNodeNotFound() *PutVirtualNodeNotFound {
	return &PutVirtualNodeNotFound{}
}

/* PutVirtualNodeNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutVirtualNodeNotFound struct {
	Payload *models.RestError
}

func (o *PutVirtualNodeNotFound) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeNotFound  %+v", 404, o.Payload)
}
func (o *PutVirtualNodeNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVirtualNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVirtualNodeInternalServerError creates a PutVirtualNodeInternalServerError with default headers values
func NewPutVirtualNodeInternalServerError() *PutVirtualNodeInternalServerError {
	return &PutVirtualNodeInternalServerError{}
}

/* PutVirtualNodeInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutVirtualNodeInternalServerError struct {
	Payload *models.RestError
}

func (o *PutVirtualNodeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/virtualnodes/{Uuid}][%d] putVirtualNodeInternalServerError  %+v", 500, o.Payload)
}
func (o *PutVirtualNodeInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVirtualNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
