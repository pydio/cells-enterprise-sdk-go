// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new enterprise config service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new enterprise config service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new enterprise config service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for enterprise config service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteExternalDirectory(params *DeleteExternalDirectoryParams, opts ...ClientOption) (*DeleteExternalDirectoryOK, error)

	DeleteOAuth2Client(params *DeleteOAuth2ClientParams, opts ...ClientOption) (*DeleteOAuth2ClientOK, error)

	DeleteOAuth2Connector(params *DeleteOAuth2ConnectorParams, opts ...ClientOption) (*DeleteOAuth2ConnectorOK, error)

	DeleteVersioningPolicy(params *DeleteVersioningPolicyParams, opts ...ClientOption) (*DeleteVersioningPolicyOK, error)

	DeleteVirtualNode(params *DeleteVirtualNodeParams, opts ...ClientOption) (*DeleteVirtualNodeOK, error)

	ListExternalDirectories(params *ListExternalDirectoriesParams, opts ...ClientOption) (*ListExternalDirectoriesOK, error)

	ListOAuth2Clients(params *ListOAuth2ClientsParams, opts ...ClientOption) (*ListOAuth2ClientsOK, error)

	ListOAuth2Connectors(params *ListOAuth2ConnectorsParams, opts ...ClientOption) (*ListOAuth2ConnectorsOK, error)

	ListSites(params *ListSitesParams, opts ...ClientOption) (*ListSitesOK, error)

	PingExternalDirectory(params *PingExternalDirectoryParams, opts ...ClientOption) (*PingExternalDirectoryOK, error)

	PutExternalDirectory(params *PutExternalDirectoryParams, opts ...ClientOption) (*PutExternalDirectoryOK, error)

	PutOAuth2Client(params *PutOAuth2ClientParams, opts ...ClientOption) (*PutOAuth2ClientOK, error)

	PutOAuth2Connector(params *PutOAuth2ConnectorParams, opts ...ClientOption) (*PutOAuth2ConnectorOK, error)

	PutOAuth2Connectors(params *PutOAuth2ConnectorsParams, opts ...ClientOption) (*PutOAuth2ConnectorsOK, error)

	PutVersioningPolicy(params *PutVersioningPolicyParams, opts ...ClientOption) (*PutVersioningPolicyOK, error)

	PutVirtualNode(params *PutVirtualNodeParams, opts ...ClientOption) (*PutVirtualNodeOK, error)

	SearchExternalDirectory(params *SearchExternalDirectoryParams, opts ...ClientOption) (*SearchExternalDirectoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteExternalDirectory enterprises only delete external directory
*/
func (a *Client) DeleteExternalDirectory(params *DeleteExternalDirectoryParams, opts ...ClientOption) (*DeleteExternalDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExternalDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteExternalDirectory",
		Method:             "DELETE",
		PathPattern:        "/config/directories/{ConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteExternalDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExternalDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteExternalDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOAuth2Client enterprises only delete an oauth2 client
*/
func (a *Client) DeleteOAuth2Client(params *DeleteOAuth2ClientParams, opts ...ClientOption) (*DeleteOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOAuth2Client",
		Method:             "DELETE",
		PathPattern:        "/config/oauth2clients/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOAuth2Connector enterprises only delete an oauth2 client
*/
func (a *Client) DeleteOAuth2Connector(params *DeleteOAuth2ConnectorParams, opts ...ClientOption) (*DeleteOAuth2ConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOAuth2ConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOAuth2Connector",
		Method:             "DELETE",
		PathPattern:        "/config/oauth2connectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteOAuth2ConnectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOAuth2ConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOAuth2ConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteVersioningPolicy enterprises only delete a versioning policy
*/
func (a *Client) DeleteVersioningPolicy(params *DeleteVersioningPolicyParams, opts ...ClientOption) (*DeleteVersioningPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVersioningPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVersioningPolicy",
		Method:             "DELETE",
		PathPattern:        "/config/versioning/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteVersioningPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVersioningPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteVersioningPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteVirtualNode enterprises only delete a virtual node
*/
func (a *Client) DeleteVirtualNode(params *DeleteVirtualNodeParams, opts ...ClientOption) (*DeleteVirtualNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVirtualNode",
		Method:             "DELETE",
		PathPattern:        "/config/virtualnodes/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &DeleteVirtualNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteVirtualNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListExternalDirectories enterprises only list additional user directories
*/
func (a *Client) ListExternalDirectories(params *ListExternalDirectoriesParams, opts ...ClientOption) (*ListExternalDirectoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExternalDirectoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListExternalDirectories",
		Method:             "GET",
		PathPattern:        "/config/directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListExternalDirectoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExternalDirectoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListExternalDirectoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOAuth2Clients enterprises only list oauth2 clients
*/
func (a *Client) ListOAuth2Clients(params *ListOAuth2ClientsParams, opts ...ClientOption) (*ListOAuth2ClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOAuth2ClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOAuth2Clients",
		Method:             "GET",
		PathPattern:        "/config/oauth2clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListOAuth2ClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOAuth2ClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOAuth2ClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOAuth2Connectors enterprises only list oauth2 connectors
*/
func (a *Client) ListOAuth2Connectors(params *ListOAuth2ConnectorsParams, opts ...ClientOption) (*ListOAuth2ConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOAuth2ConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOAuth2Connectors",
		Method:             "GET",
		PathPattern:        "/config/oauth2connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListOAuth2ConnectorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOAuth2ConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOAuth2ConnectorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSites enterprises only list configured sites
*/
func (a *Client) ListSites(params *ListSitesParams, opts ...ClientOption) (*ListSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSites",
		Method:             "GET",
		PathPattern:        "/config/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListSitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSitesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PingExternalDirectory enterprises only sends an arbitrary config and try to ping the server and bind
*/
func (a *Client) PingExternalDirectory(params *PingExternalDirectoryParams, opts ...ClientOption) (*PingExternalDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingExternalDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PingExternalDirectory",
		Method:             "POST",
		PathPattern:        "/config/directories-test/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PingExternalDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PingExternalDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PingExternalDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutExternalDirectory enterprises only add create an external directory
*/
func (a *Client) PutExternalDirectory(params *PutExternalDirectoryParams, opts ...ClientOption) (*PutExternalDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutExternalDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutExternalDirectory",
		Method:             "PUT",
		PathPattern:        "/config/directories/{ConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutExternalDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutExternalDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutExternalDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutOAuth2Client enterprises only add create a new oauth2 client
*/
func (a *Client) PutOAuth2Client(params *PutOAuth2ClientParams, opts ...ClientOption) (*PutOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutOAuth2Client",
		Method:             "PUT",
		PathPattern:        "/config/oauth2clients/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutOAuth2Connector enterprises only add create a new oauth2 client
*/
func (a *Client) PutOAuth2Connector(params *PutOAuth2ConnectorParams, opts ...ClientOption) (*PutOAuth2ConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOAuth2ConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutOAuth2Connector",
		Method:             "PUT",
		PathPattern:        "/config/oauth2connectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutOAuth2ConnectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOAuth2ConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutOAuth2ConnectorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutOAuth2Connectors enterprises only add create a new oauth2 client
*/
func (a *Client) PutOAuth2Connectors(params *PutOAuth2ConnectorsParams, opts ...ClientOption) (*PutOAuth2ConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOAuth2ConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutOAuth2Connectors",
		Method:             "PUT",
		PathPattern:        "/config/oauth2connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutOAuth2ConnectorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOAuth2ConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutOAuth2ConnectorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutVersioningPolicy enterprises only create or update a versioning policy
*/
func (a *Client) PutVersioningPolicy(params *PutVersioningPolicyParams, opts ...ClientOption) (*PutVersioningPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVersioningPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutVersioningPolicy",
		Method:             "POST",
		PathPattern:        "/config/versioning/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutVersioningPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVersioningPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutVersioningPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutVirtualNode enterprises only create or update a virtual node
*/
func (a *Client) PutVirtualNode(params *PutVirtualNodeParams, opts ...ClientOption) (*PutVirtualNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVirtualNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutVirtualNode",
		Method:             "POST",
		PathPattern:        "/config/virtualnodes/{Uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &PutVirtualNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVirtualNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutVirtualNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchExternalDirectory enterprises only sends an arbitrary config and try to ldapsearch using a given search filter
*/
func (a *Client) SearchExternalDirectory(params *SearchExternalDirectoryParams, opts ...ClientOption) (*SearchExternalDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchExternalDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchExternalDirectory",
		Method:             "POST",
		PathPattern:        "/config/directories-test/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SearchExternalDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchExternalDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchExternalDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
