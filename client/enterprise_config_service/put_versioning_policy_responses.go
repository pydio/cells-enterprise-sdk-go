// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// PutVersioningPolicyReader is a Reader for the PutVersioningPolicy structure.
type PutVersioningPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVersioningPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutVersioningPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutVersioningPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutVersioningPolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutVersioningPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutVersioningPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutVersioningPolicyOK creates a PutVersioningPolicyOK with default headers values
func NewPutVersioningPolicyOK() *PutVersioningPolicyOK {
	return &PutVersioningPolicyOK{}
}

/* PutVersioningPolicyOK describes a response with status code 200, with default header values.

PutVersioningPolicyOK put versioning policy o k
*/
type PutVersioningPolicyOK struct {
	Payload *models.TreeVersioningPolicy
}

func (o *PutVersioningPolicyOK) Error() string {
	return fmt.Sprintf("[POST /config/versioning/{Uuid}][%d] putVersioningPolicyOK  %+v", 200, o.Payload)
}
func (o *PutVersioningPolicyOK) GetPayload() *models.TreeVersioningPolicy {
	return o.Payload
}

func (o *PutVersioningPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TreeVersioningPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVersioningPolicyUnauthorized creates a PutVersioningPolicyUnauthorized with default headers values
func NewPutVersioningPolicyUnauthorized() *PutVersioningPolicyUnauthorized {
	return &PutVersioningPolicyUnauthorized{}
}

/* PutVersioningPolicyUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type PutVersioningPolicyUnauthorized struct {
}

func (o *PutVersioningPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /config/versioning/{Uuid}][%d] putVersioningPolicyUnauthorized ", 401)
}

func (o *PutVersioningPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutVersioningPolicyForbidden creates a PutVersioningPolicyForbidden with default headers values
func NewPutVersioningPolicyForbidden() *PutVersioningPolicyForbidden {
	return &PutVersioningPolicyForbidden{}
}

/* PutVersioningPolicyForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type PutVersioningPolicyForbidden struct {
	Payload *models.RestError
}

func (o *PutVersioningPolicyForbidden) Error() string {
	return fmt.Sprintf("[POST /config/versioning/{Uuid}][%d] putVersioningPolicyForbidden  %+v", 403, o.Payload)
}
func (o *PutVersioningPolicyForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVersioningPolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVersioningPolicyNotFound creates a PutVersioningPolicyNotFound with default headers values
func NewPutVersioningPolicyNotFound() *PutVersioningPolicyNotFound {
	return &PutVersioningPolicyNotFound{}
}

/* PutVersioningPolicyNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type PutVersioningPolicyNotFound struct {
	Payload *models.RestError
}

func (o *PutVersioningPolicyNotFound) Error() string {
	return fmt.Sprintf("[POST /config/versioning/{Uuid}][%d] putVersioningPolicyNotFound  %+v", 404, o.Payload)
}
func (o *PutVersioningPolicyNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVersioningPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVersioningPolicyInternalServerError creates a PutVersioningPolicyInternalServerError with default headers values
func NewPutVersioningPolicyInternalServerError() *PutVersioningPolicyInternalServerError {
	return &PutVersioningPolicyInternalServerError{}
}

/* PutVersioningPolicyInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type PutVersioningPolicyInternalServerError struct {
	Payload *models.RestError
}

func (o *PutVersioningPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /config/versioning/{Uuid}][%d] putVersioningPolicyInternalServerError  %+v", 500, o.Payload)
}
func (o *PutVersioningPolicyInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *PutVersioningPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
