// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// PutOAuth2ConnectorReader is a Reader for the PutOAuth2Connector structure.
type PutOAuth2ConnectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOAuth2ConnectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutOAuth2ConnectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPutOAuth2ConnectorDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutOAuth2ConnectorOK creates a PutOAuth2ConnectorOK with default headers values
func NewPutOAuth2ConnectorOK() *PutOAuth2ConnectorOK {
	return &PutOAuth2ConnectorOK{}
}

/*
PutOAuth2ConnectorOK describes a response with status code 200, with default header values.

A successful response.
*/
type PutOAuth2ConnectorOK struct {
	Payload *models.EntOAuth2ConnectorResponse
}

// IsSuccess returns true when this put o auth2 connector o k response has a 2xx status code
func (o *PutOAuth2ConnectorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put o auth2 connector o k response has a 3xx status code
func (o *PutOAuth2ConnectorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put o auth2 connector o k response has a 4xx status code
func (o *PutOAuth2ConnectorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put o auth2 connector o k response has a 5xx status code
func (o *PutOAuth2ConnectorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put o auth2 connector o k response a status code equal to that given
func (o *PutOAuth2ConnectorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put o auth2 connector o k response
func (o *PutOAuth2ConnectorOK) Code() int {
	return 200
}

func (o *PutOAuth2ConnectorOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /config/oauth2connectors/{id}][%d] putOAuth2ConnectorOK %s", 200, payload)
}

func (o *PutOAuth2ConnectorOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /config/oauth2connectors/{id}][%d] putOAuth2ConnectorOK %s", 200, payload)
}

func (o *PutOAuth2ConnectorOK) GetPayload() *models.EntOAuth2ConnectorResponse {
	return o.Payload
}

func (o *PutOAuth2ConnectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EntOAuth2ConnectorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOAuth2ConnectorDefault creates a PutOAuth2ConnectorDefault with default headers values
func NewPutOAuth2ConnectorDefault(code int) *PutOAuth2ConnectorDefault {
	return &PutOAuth2ConnectorDefault{
		_statusCode: code,
	}
}

/*
PutOAuth2ConnectorDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PutOAuth2ConnectorDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this put o auth2 connector default response has a 2xx status code
func (o *PutOAuth2ConnectorDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put o auth2 connector default response has a 3xx status code
func (o *PutOAuth2ConnectorDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put o auth2 connector default response has a 4xx status code
func (o *PutOAuth2ConnectorDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put o auth2 connector default response has a 5xx status code
func (o *PutOAuth2ConnectorDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put o auth2 connector default response a status code equal to that given
func (o *PutOAuth2ConnectorDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put o auth2 connector default response
func (o *PutOAuth2ConnectorDefault) Code() int {
	return o._statusCode
}

func (o *PutOAuth2ConnectorDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /config/oauth2connectors/{id}][%d] PutOAuth2Connector default %s", o._statusCode, payload)
}

func (o *PutOAuth2ConnectorDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /config/oauth2connectors/{id}][%d] PutOAuth2Connector default %s", o._statusCode, payload)
}

func (o *PutOAuth2ConnectorDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *PutOAuth2ConnectorDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutOAuth2ConnectorBody put o auth2 connector body
swagger:model PutOAuth2ConnectorBody
*/
type PutOAuth2ConnectorBody struct {

	// configbitbucket
	Configbitbucket *models.AuthOAuth2ConnectorBitbucketConfig `json:"configbitbucket,omitempty"`

	// configgithub
	Configgithub *models.AuthOAuth2ConnectorGithubConfig `json:"configgithub,omitempty"`

	// configgitlab
	Configgitlab *models.AuthOAuth2ConnectorGitlabConfig `json:"configgitlab,omitempty"`

	// configldap
	Configldap *models.AuthLdapServerConfig `json:"configldap,omitempty"`

	// configlinkedin
	Configlinkedin *models.AuthOAuth2ConnectorLinkedinConfig `json:"configlinkedin,omitempty"`

	// configmicrosoft
	Configmicrosoft *models.AuthOAuth2ConnectorMicrosoftConfig `json:"configmicrosoft,omitempty"`

	// configmock
	Configmock *models.AuthOAuth2ConnectorMockConfig `json:"configmock,omitempty"`

	// configoauth
	Configoauth *models.AuthOAuth2ConnectorOAuthConfig `json:"configoauth,omitempty"`

	// configoidc
	Configoidc *models.AuthOAuth2ConnectorOIDCConfig `json:"configoidc,omitempty"`

	// configpydio
	Configpydio *models.AuthOAuth2ConnectorPydioConfig `json:"configpydio,omitempty"`

	// configsaml
	Configsaml *models.AuthOAuth2ConnectorSAMLConfig `json:"configsaml,omitempty"`

	// mapping rules
	MappingRules []*models.AuthOAuth2MappingRule `json:"mappingRules"`

	// name
	Name string `json:"name,omitempty"`

	// sites
	Sites []string `json:"sites"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this put o auth2 connector body
func (o *PutOAuth2ConnectorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfigbitbucket(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfiggithub(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfiggitlab(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigldap(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfiglinkedin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigmicrosoft(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigmock(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigoauth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigoidc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigpydio(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfigsaml(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMappingRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigbitbucket(formats strfmt.Registry) error {
	if swag.IsZero(o.Configbitbucket) { // not required
		return nil
	}

	if o.Configbitbucket != nil {
		if err := o.Configbitbucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configbitbucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configbitbucket")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfiggithub(formats strfmt.Registry) error {
	if swag.IsZero(o.Configgithub) { // not required
		return nil
	}

	if o.Configgithub != nil {
		if err := o.Configgithub.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configgithub")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configgithub")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfiggitlab(formats strfmt.Registry) error {
	if swag.IsZero(o.Configgitlab) { // not required
		return nil
	}

	if o.Configgitlab != nil {
		if err := o.Configgitlab.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configgitlab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configgitlab")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigldap(formats strfmt.Registry) error {
	if swag.IsZero(o.Configldap) { // not required
		return nil
	}

	if o.Configldap != nil {
		if err := o.Configldap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configldap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configldap")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfiglinkedin(formats strfmt.Registry) error {
	if swag.IsZero(o.Configlinkedin) { // not required
		return nil
	}

	if o.Configlinkedin != nil {
		if err := o.Configlinkedin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configlinkedin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configlinkedin")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigmicrosoft(formats strfmt.Registry) error {
	if swag.IsZero(o.Configmicrosoft) { // not required
		return nil
	}

	if o.Configmicrosoft != nil {
		if err := o.Configmicrosoft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configmicrosoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configmicrosoft")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigmock(formats strfmt.Registry) error {
	if swag.IsZero(o.Configmock) { // not required
		return nil
	}

	if o.Configmock != nil {
		if err := o.Configmock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configmock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configmock")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigoauth(formats strfmt.Registry) error {
	if swag.IsZero(o.Configoauth) { // not required
		return nil
	}

	if o.Configoauth != nil {
		if err := o.Configoauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configoauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configoauth")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigoidc(formats strfmt.Registry) error {
	if swag.IsZero(o.Configoidc) { // not required
		return nil
	}

	if o.Configoidc != nil {
		if err := o.Configoidc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configoidc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configoidc")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigpydio(formats strfmt.Registry) error {
	if swag.IsZero(o.Configpydio) { // not required
		return nil
	}

	if o.Configpydio != nil {
		if err := o.Configpydio.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configpydio")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configpydio")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateConfigsaml(formats strfmt.Registry) error {
	if swag.IsZero(o.Configsaml) { // not required
		return nil
	}

	if o.Configsaml != nil {
		if err := o.Configsaml.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configsaml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configsaml")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) validateMappingRules(formats strfmt.Registry) error {
	if swag.IsZero(o.MappingRules) { // not required
		return nil
	}

	for i := 0; i < len(o.MappingRules); i++ {
		if swag.IsZero(o.MappingRules[i]) { // not required
			continue
		}

		if o.MappingRules[i] != nil {
			if err := o.MappingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "mappingRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "mappingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put o auth2 connector body based on the context it is used
func (o *PutOAuth2ConnectorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConfigbitbucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfiggithub(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfiggitlab(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigldap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfiglinkedin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigmicrosoft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigmock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigoauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigoidc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigpydio(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConfigsaml(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMappingRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigbitbucket(ctx context.Context, formats strfmt.Registry) error {

	if o.Configbitbucket != nil {

		if swag.IsZero(o.Configbitbucket) { // not required
			return nil
		}

		if err := o.Configbitbucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configbitbucket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configbitbucket")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfiggithub(ctx context.Context, formats strfmt.Registry) error {

	if o.Configgithub != nil {

		if swag.IsZero(o.Configgithub) { // not required
			return nil
		}

		if err := o.Configgithub.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configgithub")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configgithub")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfiggitlab(ctx context.Context, formats strfmt.Registry) error {

	if o.Configgitlab != nil {

		if swag.IsZero(o.Configgitlab) { // not required
			return nil
		}

		if err := o.Configgitlab.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configgitlab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configgitlab")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigldap(ctx context.Context, formats strfmt.Registry) error {

	if o.Configldap != nil {

		if swag.IsZero(o.Configldap) { // not required
			return nil
		}

		if err := o.Configldap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configldap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configldap")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfiglinkedin(ctx context.Context, formats strfmt.Registry) error {

	if o.Configlinkedin != nil {

		if swag.IsZero(o.Configlinkedin) { // not required
			return nil
		}

		if err := o.Configlinkedin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configlinkedin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configlinkedin")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigmicrosoft(ctx context.Context, formats strfmt.Registry) error {

	if o.Configmicrosoft != nil {

		if swag.IsZero(o.Configmicrosoft) { // not required
			return nil
		}

		if err := o.Configmicrosoft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configmicrosoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configmicrosoft")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigmock(ctx context.Context, formats strfmt.Registry) error {

	if o.Configmock != nil {

		if swag.IsZero(o.Configmock) { // not required
			return nil
		}

		if err := o.Configmock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configmock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configmock")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigoauth(ctx context.Context, formats strfmt.Registry) error {

	if o.Configoauth != nil {

		if swag.IsZero(o.Configoauth) { // not required
			return nil
		}

		if err := o.Configoauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configoauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configoauth")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigoidc(ctx context.Context, formats strfmt.Registry) error {

	if o.Configoidc != nil {

		if swag.IsZero(o.Configoidc) { // not required
			return nil
		}

		if err := o.Configoidc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configoidc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configoidc")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigpydio(ctx context.Context, formats strfmt.Registry) error {

	if o.Configpydio != nil {

		if swag.IsZero(o.Configpydio) { // not required
			return nil
		}

		if err := o.Configpydio.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configpydio")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configpydio")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateConfigsaml(ctx context.Context, formats strfmt.Registry) error {

	if o.Configsaml != nil {

		if swag.IsZero(o.Configsaml) { // not required
			return nil
		}

		if err := o.Configsaml.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "configsaml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "configsaml")
			}
			return err
		}
	}

	return nil
}

func (o *PutOAuth2ConnectorBody) contextValidateMappingRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MappingRules); i++ {

		if o.MappingRules[i] != nil {

			if swag.IsZero(o.MappingRules[i]) { // not required
				return nil
			}

			if err := o.MappingRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "mappingRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "mappingRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutOAuth2ConnectorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutOAuth2ConnectorBody) UnmarshalBinary(b []byte) error {
	var res PutOAuth2ConnectorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
