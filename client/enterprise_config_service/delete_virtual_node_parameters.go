// Code generated by go-swagger; DO NOT EDIT.

package enterprise_config_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteVirtualNodeParams creates a new DeleteVirtualNodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteVirtualNodeParams() *DeleteVirtualNodeParams {
	return &DeleteVirtualNodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteVirtualNodeParamsWithTimeout creates a new DeleteVirtualNodeParams object
// with the ability to set a timeout on a request.
func NewDeleteVirtualNodeParamsWithTimeout(timeout time.Duration) *DeleteVirtualNodeParams {
	return &DeleteVirtualNodeParams{
		timeout: timeout,
	}
}

// NewDeleteVirtualNodeParamsWithContext creates a new DeleteVirtualNodeParams object
// with the ability to set a context for a request.
func NewDeleteVirtualNodeParamsWithContext(ctx context.Context) *DeleteVirtualNodeParams {
	return &DeleteVirtualNodeParams{
		Context: ctx,
	}
}

// NewDeleteVirtualNodeParamsWithHTTPClient creates a new DeleteVirtualNodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteVirtualNodeParamsWithHTTPClient(client *http.Client) *DeleteVirtualNodeParams {
	return &DeleteVirtualNodeParams{
		HTTPClient: client,
	}
}

/*
DeleteVirtualNodeParams contains all the parameters to send to the API endpoint

	for the delete virtual node operation.

	Typically these are written to a http.Request.
*/
type DeleteVirtualNodeParams struct {

	/* Etag.

	   Hash of the content if node is a LEAF, Uuid or
	*/
	Etag *string

	/* MTime.

	   Last modification Timestamp

	   Format: int64
	*/
	MTime *string

	/* Mode.

	   Permission mode, like 0777

	   Format: int32
	*/
	Mode *int32

	// Path.
	Path *string

	/* Size.

	   Size of the file, or cumulated size of folder

	   Format: int64
	*/
	Size *string

	// Type.
	//
	// Default: "UNKNOWN"
	Type *string

	/* UUID.

	     ------------------------------------
	Core identification of the node
	------------------------------------
	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete virtual node params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteVirtualNodeParams) WithDefaults() *DeleteVirtualNodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete virtual node params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteVirtualNodeParams) SetDefaults() {
	var (
		typeVarDefault = string("UNKNOWN")
	)

	val := DeleteVirtualNodeParams{
		Type: &typeVarDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithTimeout(timeout time.Duration) *DeleteVirtualNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithContext(ctx context.Context) *DeleteVirtualNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithHTTPClient(client *http.Client) *DeleteVirtualNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEtag adds the etag to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithEtag(etag *string) *DeleteVirtualNodeParams {
	o.SetEtag(etag)
	return o
}

// SetEtag adds the etag to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetEtag(etag *string) {
	o.Etag = etag
}

// WithMTime adds the mTime to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithMTime(mTime *string) *DeleteVirtualNodeParams {
	o.SetMTime(mTime)
	return o
}

// SetMTime adds the mTime to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetMTime(mTime *string) {
	o.MTime = mTime
}

// WithMode adds the mode to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithMode(mode *int32) *DeleteVirtualNodeParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetMode(mode *int32) {
	o.Mode = mode
}

// WithPath adds the path to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithPath(path *string) *DeleteVirtualNodeParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetPath(path *string) {
	o.Path = path
}

// WithSize adds the size to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithSize(size *string) *DeleteVirtualNodeParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetSize(size *string) {
	o.Size = size
}

// WithType adds the typeVar to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithType(typeVar *string) *DeleteVirtualNodeParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUUID adds the uuid to the delete virtual node params
func (o *DeleteVirtualNodeParams) WithUUID(uuid string) *DeleteVirtualNodeParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the delete virtual node params
func (o *DeleteVirtualNodeParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteVirtualNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Etag != nil {

		// query param Etag
		var qrEtag string

		if o.Etag != nil {
			qrEtag = *o.Etag
		}
		qEtag := qrEtag
		if qEtag != "" {

			if err := r.SetQueryParam("Etag", qEtag); err != nil {
				return err
			}
		}
	}

	if o.MTime != nil {

		// query param MTime
		var qrMTime string

		if o.MTime != nil {
			qrMTime = *o.MTime
		}
		qMTime := qrMTime
		if qMTime != "" {

			if err := r.SetQueryParam("MTime", qMTime); err != nil {
				return err
			}
		}
	}

	if o.Mode != nil {

		// query param Mode
		var qrMode int32

		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := swag.FormatInt32(qrMode)
		if qMode != "" {

			if err := r.SetQueryParam("Mode", qMode); err != nil {
				return err
			}
		}
	}

	if o.Path != nil {

		// query param Path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("Path", qPath); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param Size
		var qrSize string

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := qrSize
		if qSize != "" {

			if err := r.SetQueryParam("Size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param Type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("Type", qType); err != nil {
				return err
			}
		}
	}

	// path param Uuid
	if err := r.SetPathParam("Uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
