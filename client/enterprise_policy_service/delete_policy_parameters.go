// Code generated by go-swagger; DO NOT EDIT.

package enterprise_policy_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeletePolicyParams creates a new DeletePolicyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeletePolicyParams() *DeletePolicyParams {
	return &DeletePolicyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePolicyParamsWithTimeout creates a new DeletePolicyParams object
// with the ability to set a timeout on a request.
func NewDeletePolicyParamsWithTimeout(timeout time.Duration) *DeletePolicyParams {
	return &DeletePolicyParams{
		timeout: timeout,
	}
}

// NewDeletePolicyParamsWithContext creates a new DeletePolicyParams object
// with the ability to set a context for a request.
func NewDeletePolicyParamsWithContext(ctx context.Context) *DeletePolicyParams {
	return &DeletePolicyParams{
		Context: ctx,
	}
}

// NewDeletePolicyParamsWithHTTPClient creates a new DeletePolicyParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeletePolicyParamsWithHTTPClient(client *http.Client) *DeletePolicyParams {
	return &DeletePolicyParams{
		HTTPClient: client,
	}
}

/*
DeletePolicyParams contains all the parameters to send to the API endpoint

	for the delete policy operation.

	Typically these are written to a http.Request.
*/
type DeletePolicyParams struct {

	// Description.
	Description *string

	// LastUpdated.
	//
	// Format: int32
	LastUpdated *int32

	// Name.
	Name *string

	// OwnerUUID.
	OwnerUUID *string

	// ResourceGroup.
	//
	// Default: "rest"
	ResourceGroup *string

	// UUID.
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeletePolicyParams) WithDefaults() *DeletePolicyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeletePolicyParams) SetDefaults() {
	var (
		resourceGroupDefault = string("rest")
	)

	val := DeletePolicyParams{
		ResourceGroup: &resourceGroupDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete policy params
func (o *DeletePolicyParams) WithTimeout(timeout time.Duration) *DeletePolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete policy params
func (o *DeletePolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete policy params
func (o *DeletePolicyParams) WithContext(ctx context.Context) *DeletePolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete policy params
func (o *DeletePolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete policy params
func (o *DeletePolicyParams) WithHTTPClient(client *http.Client) *DeletePolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete policy params
func (o *DeletePolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the delete policy params
func (o *DeletePolicyParams) WithDescription(description *string) *DeletePolicyParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the delete policy params
func (o *DeletePolicyParams) SetDescription(description *string) {
	o.Description = description
}

// WithLastUpdated adds the lastUpdated to the delete policy params
func (o *DeletePolicyParams) WithLastUpdated(lastUpdated *int32) *DeletePolicyParams {
	o.SetLastUpdated(lastUpdated)
	return o
}

// SetLastUpdated adds the lastUpdated to the delete policy params
func (o *DeletePolicyParams) SetLastUpdated(lastUpdated *int32) {
	o.LastUpdated = lastUpdated
}

// WithName adds the name to the delete policy params
func (o *DeletePolicyParams) WithName(name *string) *DeletePolicyParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the delete policy params
func (o *DeletePolicyParams) SetName(name *string) {
	o.Name = name
}

// WithOwnerUUID adds the ownerUUID to the delete policy params
func (o *DeletePolicyParams) WithOwnerUUID(ownerUUID *string) *DeletePolicyParams {
	o.SetOwnerUUID(ownerUUID)
	return o
}

// SetOwnerUUID adds the ownerUuid to the delete policy params
func (o *DeletePolicyParams) SetOwnerUUID(ownerUUID *string) {
	o.OwnerUUID = ownerUUID
}

// WithResourceGroup adds the resourceGroup to the delete policy params
func (o *DeletePolicyParams) WithResourceGroup(resourceGroup *string) *DeletePolicyParams {
	o.SetResourceGroup(resourceGroup)
	return o
}

// SetResourceGroup adds the resourceGroup to the delete policy params
func (o *DeletePolicyParams) SetResourceGroup(resourceGroup *string) {
	o.ResourceGroup = resourceGroup
}

// WithUUID adds the uuid to the delete policy params
func (o *DeletePolicyParams) WithUUID(uuid string) *DeletePolicyParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the delete policy params
func (o *DeletePolicyParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param Description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("Description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.LastUpdated != nil {

		// query param LastUpdated
		var qrLastUpdated int32

		if o.LastUpdated != nil {
			qrLastUpdated = *o.LastUpdated
		}
		qLastUpdated := swag.FormatInt32(qrLastUpdated)
		if qLastUpdated != "" {

			if err := r.SetQueryParam("LastUpdated", qLastUpdated); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param Name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("Name", qName); err != nil {
				return err
			}
		}
	}

	if o.OwnerUUID != nil {

		// query param OwnerUuid
		var qrOwnerUUID string

		if o.OwnerUUID != nil {
			qrOwnerUUID = *o.OwnerUUID
		}
		qOwnerUUID := qrOwnerUUID
		if qOwnerUUID != "" {

			if err := r.SetQueryParam("OwnerUuid", qOwnerUUID); err != nil {
				return err
			}
		}
	}

	if o.ResourceGroup != nil {

		// query param ResourceGroup
		var qrResourceGroup string

		if o.ResourceGroup != nil {
			qrResourceGroup = *o.ResourceGroup
		}
		qResourceGroup := qrResourceGroup
		if qResourceGroup != "" {

			if err := r.SetQueryParam("ResourceGroup", qResourceGroup); err != nil {
				return err
			}
		}
	}

	// path param Uuid
	if err := r.SetPathParam("Uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
