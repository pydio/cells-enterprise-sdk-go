// Code generated by go-swagger; DO NOT EDIT.

package enterprise_token_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new enterprise token service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for enterprise token service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GeneratePersonalAccessToken(params *GeneratePersonalAccessTokenParams, opts ...ClientOption) (*GeneratePersonalAccessTokenOK, error)

	ImpersonatePersonalAccessToken(params *ImpersonatePersonalAccessTokenParams, opts ...ClientOption) (*ImpersonatePersonalAccessTokenOK, error)

	ListPersonalAccessTokens(params *ListPersonalAccessTokensParams, opts ...ClientOption) (*ListPersonalAccessTokensOK, error)

	RevokePersonalAccessToken(params *RevokePersonalAccessTokenParams, opts ...ClientOption) (*RevokePersonalAccessTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GeneratePersonalAccessToken generates a personal access token
*/
func (a *Client) GeneratePersonalAccessToken(params *GeneratePersonalAccessTokenParams, opts ...ClientOption) (*GeneratePersonalAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneratePersonalAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GeneratePersonalAccessToken",
		Method:             "POST",
		PathPattern:        "/auth/token/personal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &GeneratePersonalAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneratePersonalAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GeneratePersonalAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ImpersonatePersonalAccessToken generates a personal access token
*/
func (a *Client) ImpersonatePersonalAccessToken(params *ImpersonatePersonalAccessTokenParams, opts ...ClientOption) (*ImpersonatePersonalAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImpersonatePersonalAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImpersonatePersonalAccessToken",
		Method:             "POST",
		PathPattern:        "/auth/token/impersonate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ImpersonatePersonalAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImpersonatePersonalAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ImpersonatePersonalAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListPersonalAccessTokens lists generated personal access tokens eventually filtering by user
*/
func (a *Client) ListPersonalAccessTokens(params *ListPersonalAccessTokensParams, opts ...ClientOption) (*ListPersonalAccessTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPersonalAccessTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPersonalAccessTokens",
		Method:             "POST",
		PathPattern:        "/auth/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &ListPersonalAccessTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPersonalAccessTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPersonalAccessTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RevokePersonalAccessToken deletes a personal access token based on its Uuid
*/
func (a *Client) RevokePersonalAccessToken(params *RevokePersonalAccessTokenParams, opts ...ClientOption) (*RevokePersonalAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokePersonalAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RevokePersonalAccessToken",
		Method:             "DELETE",
		PathPattern:        "/auth/tokens/{TokenId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &RevokePersonalAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokePersonalAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RevokePersonalAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
