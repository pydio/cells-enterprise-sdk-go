// Code generated by go-swagger; DO NOT EDIT.

package enterprise_log_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new enterprise log service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for enterprise log service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Audit(params *AuditParams, opts ...ClientOption) (*AuditOK, error)

	AuditChartData(params *AuditChartDataParams, opts ...ClientOption) (*AuditChartDataOK, error)

	AuditExport(params *AuditExportParams, opts ...ClientOption) (*AuditExportOK, error)

	SyslogExport(params *SyslogExportParams, opts ...ClientOption) (*SyslogExportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Audit enterprises only auditable logs in Json or c s v format
*/
func (a *Client) Audit(params *AuditParams, opts ...ClientOption) (*AuditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Audit",
		Method:             "POST",
		PathPattern:        "/log/audit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &AuditReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Audit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuditChartData enterprises only retrieves aggregated audit logs to generate charts
*/
func (a *Client) AuditChartData(params *AuditChartDataParams, opts ...ClientOption) (*AuditChartDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditChartDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuditChartData",
		Method:             "POST",
		PathPattern:        "/log/audit/chartdata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &AuditChartDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditChartDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AuditChartData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuditExport enterprises only auditable logs in Json or c s v format
*/
func (a *Client) AuditExport(params *AuditExportParams, opts ...ClientOption) (*AuditExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuditExport",
		Method:             "POST",
		PathPattern:        "/log/audit/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &AuditExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AuditExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyslogExport enterprises only technical logs in Json or c s v format
*/
func (a *Client) SyslogExport(params *SyslogExportParams, opts ...ClientOption) (*SyslogExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyslogExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SyslogExport",
		Method:             "POST",
		PathPattern:        "/log/sys/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "wss"},
		Params:             params,
		Reader:             &SyslogExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyslogExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SyslogExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
