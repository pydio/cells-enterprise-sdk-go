// Code generated by go-swagger; DO NOT EDIT.

package enterprise_log_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// AuditReader is a Reader for the Audit structure.
type AuditReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuditOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAuditUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuditForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuditNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuditInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuditOK creates a AuditOK with default headers values
func NewAuditOK() *AuditOK {
	return &AuditOK{}
}

/* AuditOK describes a response with status code 200, with default header values.

AuditOK audit o k
*/
type AuditOK struct {
	Payload *models.RestLogMessageCollection
}

func (o *AuditOK) Error() string {
	return fmt.Sprintf("[POST /log/audit][%d] auditOK  %+v", 200, o.Payload)
}
func (o *AuditOK) GetPayload() *models.RestLogMessageCollection {
	return o.Payload
}

func (o *AuditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestLogMessageCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditUnauthorized creates a AuditUnauthorized with default headers values
func NewAuditUnauthorized() *AuditUnauthorized {
	return &AuditUnauthorized{}
}

/* AuditUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type AuditUnauthorized struct {
}

func (o *AuditUnauthorized) Error() string {
	return fmt.Sprintf("[POST /log/audit][%d] auditUnauthorized ", 401)
}

func (o *AuditUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuditForbidden creates a AuditForbidden with default headers values
func NewAuditForbidden() *AuditForbidden {
	return &AuditForbidden{}
}

/* AuditForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type AuditForbidden struct {
	Payload *models.RestError
}

func (o *AuditForbidden) Error() string {
	return fmt.Sprintf("[POST /log/audit][%d] auditForbidden  %+v", 403, o.Payload)
}
func (o *AuditForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *AuditForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditNotFound creates a AuditNotFound with default headers values
func NewAuditNotFound() *AuditNotFound {
	return &AuditNotFound{}
}

/* AuditNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type AuditNotFound struct {
	Payload *models.RestError
}

func (o *AuditNotFound) Error() string {
	return fmt.Sprintf("[POST /log/audit][%d] auditNotFound  %+v", 404, o.Payload)
}
func (o *AuditNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *AuditNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditInternalServerError creates a AuditInternalServerError with default headers values
func NewAuditInternalServerError() *AuditInternalServerError {
	return &AuditInternalServerError{}
}

/* AuditInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type AuditInternalServerError struct {
	Payload *models.RestError
}

func (o *AuditInternalServerError) Error() string {
	return fmt.Sprintf("[POST /log/audit][%d] auditInternalServerError  %+v", 500, o.Payload)
}
func (o *AuditInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *AuditInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
