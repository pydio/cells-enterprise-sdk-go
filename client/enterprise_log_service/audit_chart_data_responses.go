// Code generated by go-swagger; DO NOT EDIT.

package enterprise_log_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// AuditChartDataReader is a Reader for the AuditChartData structure.
type AuditChartDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuditChartDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuditChartDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAuditChartDataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuditChartDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuditChartDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuditChartDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuditChartDataOK creates a AuditChartDataOK with default headers values
func NewAuditChartDataOK() *AuditChartDataOK {
	return &AuditChartDataOK{}
}

/* AuditChartDataOK describes a response with status code 200, with default header values.

AuditChartDataOK audit chart data o k
*/
type AuditChartDataOK struct {
	Payload *models.RestTimeRangeResultCollection
}

func (o *AuditChartDataOK) Error() string {
	return fmt.Sprintf("[POST /log/audit/chartdata][%d] auditChartDataOK  %+v", 200, o.Payload)
}
func (o *AuditChartDataOK) GetPayload() *models.RestTimeRangeResultCollection {
	return o.Payload
}

func (o *AuditChartDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestTimeRangeResultCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditChartDataUnauthorized creates a AuditChartDataUnauthorized with default headers values
func NewAuditChartDataUnauthorized() *AuditChartDataUnauthorized {
	return &AuditChartDataUnauthorized{}
}

/* AuditChartDataUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type AuditChartDataUnauthorized struct {
}

func (o *AuditChartDataUnauthorized) Error() string {
	return fmt.Sprintf("[POST /log/audit/chartdata][%d] auditChartDataUnauthorized ", 401)
}

func (o *AuditChartDataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuditChartDataForbidden creates a AuditChartDataForbidden with default headers values
func NewAuditChartDataForbidden() *AuditChartDataForbidden {
	return &AuditChartDataForbidden{}
}

/* AuditChartDataForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type AuditChartDataForbidden struct {
	Payload *models.RestError
}

func (o *AuditChartDataForbidden) Error() string {
	return fmt.Sprintf("[POST /log/audit/chartdata][%d] auditChartDataForbidden  %+v", 403, o.Payload)
}
func (o *AuditChartDataForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *AuditChartDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditChartDataNotFound creates a AuditChartDataNotFound with default headers values
func NewAuditChartDataNotFound() *AuditChartDataNotFound {
	return &AuditChartDataNotFound{}
}

/* AuditChartDataNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type AuditChartDataNotFound struct {
	Payload *models.RestError
}

func (o *AuditChartDataNotFound) Error() string {
	return fmt.Sprintf("[POST /log/audit/chartdata][%d] auditChartDataNotFound  %+v", 404, o.Payload)
}
func (o *AuditChartDataNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *AuditChartDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditChartDataInternalServerError creates a AuditChartDataInternalServerError with default headers values
func NewAuditChartDataInternalServerError() *AuditChartDataInternalServerError {
	return &AuditChartDataInternalServerError{}
}

/* AuditChartDataInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type AuditChartDataInternalServerError struct {
	Payload *models.RestError
}

func (o *AuditChartDataInternalServerError) Error() string {
	return fmt.Sprintf("[POST /log/audit/chartdata][%d] auditChartDataInternalServerError  %+v", 500, o.Payload)
}
func (o *AuditChartDataInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *AuditChartDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
