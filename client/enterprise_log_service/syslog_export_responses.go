// Code generated by go-swagger; DO NOT EDIT.

package enterprise_log_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/pydio/cells-enterprise-sdk-go/models"
)

// SyslogExportReader is a Reader for the SyslogExport structure.
type SyslogExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyslogExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyslogExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSyslogExportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSyslogExportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyslogExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSyslogExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSyslogExportOK creates a SyslogExportOK with default headers values
func NewSyslogExportOK() *SyslogExportOK {
	return &SyslogExportOK{}
}

/* SyslogExportOK describes a response with status code 200, with default header values.

SyslogExportOK syslog export o k
*/
type SyslogExportOK struct {
	Payload *models.RestLogMessageCollection
}

func (o *SyslogExportOK) Error() string {
	return fmt.Sprintf("[POST /log/sys/export][%d] syslogExportOK  %+v", 200, o.Payload)
}
func (o *SyslogExportOK) GetPayload() *models.RestLogMessageCollection {
	return o.Payload
}

func (o *SyslogExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestLogMessageCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyslogExportUnauthorized creates a SyslogExportUnauthorized with default headers values
func NewSyslogExportUnauthorized() *SyslogExportUnauthorized {
	return &SyslogExportUnauthorized{}
}

/* SyslogExportUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type SyslogExportUnauthorized struct {
}

func (o *SyslogExportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /log/sys/export][%d] syslogExportUnauthorized ", 401)
}

func (o *SyslogExportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyslogExportForbidden creates a SyslogExportForbidden with default headers values
func NewSyslogExportForbidden() *SyslogExportForbidden {
	return &SyslogExportForbidden{}
}

/* SyslogExportForbidden describes a response with status code 403, with default header values.

User has no permission to access this resource
*/
type SyslogExportForbidden struct {
	Payload *models.RestError
}

func (o *SyslogExportForbidden) Error() string {
	return fmt.Sprintf("[POST /log/sys/export][%d] syslogExportForbidden  %+v", 403, o.Payload)
}
func (o *SyslogExportForbidden) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SyslogExportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyslogExportNotFound creates a SyslogExportNotFound with default headers values
func NewSyslogExportNotFound() *SyslogExportNotFound {
	return &SyslogExportNotFound{}
}

/* SyslogExportNotFound describes a response with status code 404, with default header values.

Resource does not exist in the system
*/
type SyslogExportNotFound struct {
	Payload *models.RestError
}

func (o *SyslogExportNotFound) Error() string {
	return fmt.Sprintf("[POST /log/sys/export][%d] syslogExportNotFound  %+v", 404, o.Payload)
}
func (o *SyslogExportNotFound) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SyslogExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyslogExportInternalServerError creates a SyslogExportInternalServerError with default headers values
func NewSyslogExportInternalServerError() *SyslogExportInternalServerError {
	return &SyslogExportInternalServerError{}
}

/* SyslogExportInternalServerError describes a response with status code 500, with default header values.

An internal error occurred in the backend
*/
type SyslogExportInternalServerError struct {
	Payload *models.RestError
}

func (o *SyslogExportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /log/sys/export][%d] syslogExportInternalServerError  %+v", 500, o.Payload)
}
func (o *SyslogExportInternalServerError) GetPayload() *models.RestError {
	return o.Payload
}

func (o *SyslogExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
